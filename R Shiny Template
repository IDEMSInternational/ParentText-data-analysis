library(shiny)
library(shinythemes)
library(shinyjs)
#library(rpivotTable)
library(plotly)
library(shinydashboard)

parenttext_shiny <- function(data){
  # Define UI
  ui <- dashboardPage(
    header = dashboardHeader(title = "ParentText Dashboard"),
    
    sidebar = dashboardSidebar(
      if (data == "Jamaica"){
        sidebarMenu(
          menuItem("Demographics", tabName = "demographics", icon = icon("users")),
          menuItem("Parentpals", tabName = "parentpals", icon = icon("users")),
          menuItem("Engagement", tabName = "engagement", icon = icon("clipboard")),
          menuItem("Behaviours", tabName = "behaviours", icon = icon("brain"))
        )
      } else {
        sidebarMenu(
          menuItem("Demographics", tabName = "demographics", icon = icon("users")),
          menuItem("Engagement", tabName = "engagement", icon = icon("clipboard")),
          menuItem("Behaviours", tabName = "behaviours", icon = icon("brain"))
        )
      }
    ),
    
    dashboardBody(
      fluidRow(
        shinydashboard::valueBoxOutput("myvaluebox1", width=2),
        shinydashboard::valueBoxOutput("myvaluebox2", width=2),
        shinydashboard::valueBoxOutput("myvaluebox3", width=2),
        shinydashboard::valueBoxOutput("myvaluebox4", width=2),
        shinydashboard::valueBoxOutput("myvaluebox5", width=2)),
      
      #column(6, align = "centre",
      #       box( width=NULL,
      #            collapsible = FALSE,
      #            solidHeader = TRUE,
      #            splitLayout(textInput(inputId = "datefrom_text", label = "Date from:", value = "2021-12-07"),
      #                        cellArgs = list(style = "vertical-align: top"),
      #                        cellWidths = c("80%", "20%")),
      #            splitLayout(textInput(inputId = "dateto_text", label = "Date to:", value = ""),
      #                        actionButton("btn_dates", "Change Dates", class="btn-success"),
      #                        cellArgs = list(style = "vertical-align: top"),
      #                        cellWidths = c("80%", "20%")))),
      
        tabItems(
          # First tab content
          
          tabItem(tabName = "demographics",
                  fluidRow(
                    column(10, align = "centre",
                           box(splitLayout(h2("Demographics"), icon("users", "fa-6x"),
                                           cellArgs = list(style = "vertical-align: top"),
                                           cellWidths = c("80%", "20%")),
                               width = 10,
                               title = NULL,
                               collapsible = FALSE,
                               solidHeader = TRUE,
                               background = "light-blue",
                               height = "95px"))),
                  tabsetPanel(type = "tabs",
                              tabPanel("Overall",
                                       fluidRow(column(12,
                                                       box(width = NULL,
                                                           collapsible = FALSE,
                                                           solidHeader = TRUE,
                                                           fluidRow(
                                                             column(10, align = "center",
                                                                    splitLayout(
                                                                      box( width=NULL,
                                                                           collapsible = FALSE,
                                                                           title = "Consent Frequency",
                                                                           status = "primary", # primary, success, info, warning, danger
                                                                           solidHeader = TRUE,
                                                                           plotlyOutput(outputId = "plot_consent", height = "240"),
                                                                           shiny::tableOutput("consent_summary")),
                                                                      box( width=NULL,
                                                                           title = "Enrollment Frequency",
                                                                           status = "primary",
                                                                           solidHeader = TRUE,
                                                                           collapsible = FALSE,
                                                                           plotlyOutput(outputId = "plot_category", height = "240", width = "100%"),
                                                                           shiny::tableOutput("enrolled_summary")
                                                                      ),
                                                                      cellWidths = c("50%", "50%"),
                                                                      cellArgs = list(style = "vertical-align: top"))),
                                                             width = 10),
                                                           
                                                           fluidRow(
                                                             column(10, align = "center",
                                                                    #shiny::tableOutput("language_summary"),
                                                                    splitLayout(
                                                                      box(width=NULL,
                                                                          collapsible = FALSE,
                                                                          title = "Parent Demographics",
                                                                          status = "primary", # primary, success, info, warning, danger
                                                                          solidHeader = TRUE,
                                                                          shiny::tableOutput("parent_gender_summary"),
                                                                          shiny::tableOutput("parent_age_summary"),
                                                                          shiny::tableOutput("parent_child_relationship_summary"),
                                                                          shiny::tableOutput("parent_relationship_status_summary"),
                                                                      ),
                                                                      box(width=NULL,
                                                                          collapsible = FALSE,
                                                                          title = "Child Demographics",
                                                                          status = "primary", # primary, success, info, warning, danger
                                                                          solidHeader = TRUE,
                                                                          shiny::tableOutput("child_gender_summary"),
                                                                          shiny::tableOutput("child_age_summary"),
                                                                          shiny::tableOutput("child_living_with_disabilities_summary"),
                                                                          
                                                                      ), # close child box
                                                                      cellWidths = c("50%", "50%"),
                                                                      cellArgs = list(style = "vertical-align: top"))),
                                                             width = 10), # fluid row close
                                                           fluidRow(
                                                             column(12,
                                                                    box( height="300px",  width=12,
                                                                         collapsible = FALSE,
                                                                         title = "Parenting Goals",
                                                                         status = "primary", # primary, success, info, warning, danger
                                                                         solidHeader = TRUE,
                                                                         plotlyOutput(outputId = "parenting_goals_plot", height = "240", width = "100%")
                                                                    ),
                                                                    column(12,
                                                                           box( height="300px",  width=12,
                                                                                collapsible = FALSE,
                                                                                title = "Recruitment Channel",
                                                                                status = "primary", # primary, success, info, warning, danger
                                                                                solidHeader = TRUE,
                                                                                plotlyOutput(outputId = "recruitment_channel_plot", height = "240", width = "100%")
                                                                           )
                                                                    )
                                                             )
                                                           ) # close fluid row
                                                       )))), # close box, col, fluid row, tab panel
                              tabPanel("By group",
                                       fluidRow(column(12,
                                                       box(width = NULL,
                                                           collapsible = FALSE,
                                                           solidHeader = TRUE,
                                                           fluidRow(
                                                             column(
                                                               width = 12,
                                                               #align = "center",
                                                               fluidRow(
                                                                 column(6, uiOutput("groups")),
                                                               ) #fluid row closure
                                                             ) #Outer column closure
                                                           ),
                                                           fluidRow(
                                                             column(10, align = "center",
                                                                    splitLayout(
                                                                      box(width=NULL,
                                                                          collapsible = FALSE,
                                                                          title = "Consent Frequency",
                                                                          status = "primary", # primary, success, info, warning, danger
                                                                          solidHeader = TRUE,
                                                                          plotlyOutput(outputId = "plot_consent_group", height = "240"),
                                                                          shiny::tableOutput("consent_summary_group")),
                                                                      box(width=NULL,
                                                                          title = "Enrollment Frequency",
                                                                          status = "primary",
                                                                          solidHeader = TRUE,
                                                                          collapsible = FALSE,
                                                                          plotlyOutput(outputId = "plot_category_group", height = "240", width = "100%"),
                                                                          shiny::tableOutput("enrolled_summary_group")
                                                                      ),
                                                                      cellWidths = c("50%", "50%"),
                                                                      cellArgs = list(style = "vertical-align: top"))),
                                                             width = 10),
                                                           fluidRow(
                                                             column(10, align = "center",
                                                                    splitLayout(
                                                                      box(width=NULL,
                                                                          collapsible = FALSE,
                                                                          title = "Parent Demographics",
                                                                          status = "primary", # primary, success, info, warning, danger
                                                                          solidHeader = TRUE,
                                                                          shiny::tableOutput("parent_gender_group_summary"),
                                                                          shiny::tableOutput("parent_age_group_summary"),
                                                                          shiny::tableOutput("parent_child_relationship_group_summary"),
                                                                          shiny::tableOutput("parent_relationship_status_group_summary"),
                                                                      ),
                                                                      
                                                                      box(width=NULL,
                                                                          collapsible = FALSE,
                                                                          title = "Child Demographics",
                                                                          status = "primary", # primary, success, info, warning, danger
                                                                          solidHeader = TRUE,
                                                                          shiny::tableOutput("child_gender_group_summary"),
                                                                          shiny::tableOutput("child_age_group_summary"),
                                                                          shiny::tableOutput("child_living_with_disabilities_group_summary"),
                                                                          
                                                                      ), # close child box
                                                                      cellWidths = c("50%", "50%"),
                                                                      cellArgs = list(style = "vertical-align: top")), # split layout for parent to child demographics close
                                                                    fluidRow(
                                                                      column(12,
                                                                             box( height="300px",  width=12,
                                                                                  collapsible = FALSE,
                                                                                  title = "Parenting Goals",
                                                                                  status = "primary", # primary, success, info, warning, danger
                                                                                  solidHeader = TRUE,
                                                                                  plotlyOutput(outputId = "parenting_goals_group_plot", height = "240", width = "100%")
                                                                             )
                                                                      ),
                                                                      column(12,
                                                                             box( height="300px",  width=12,
                                                                                  collapsible = FALSE,
                                                                                  title = "Recruitment Channel",
                                                                                  status = "primary", # primary, success, info, warning, danger
                                                                                  solidHeader = TRUE,
                                                                                  plotlyOutput(outputId = "recruitment_channel_group_plot", height = "240", width = "100%")
                                                                             )
                                                                      )
                                                                    ) # close fluid row
                                                             )
                                                           )
                                                       )))) # close box, col, fluid row, tab panel
                  ) # close tabset panel
          ), # close tab
          
          # Second tab content
          tabItem(tabName = "engagement",
                  fluidRow(
                    column(10, align = "centre",
                           box(splitLayout(h2("Engagement"), icon("clipboard", "fa-6x"),
                                           cellArgs = list(style = "vertical-align: top"),
                                           cellWidths = c("80%", "20%")),
                               width = 10,
                               title = NULL,
                               collapsible = FALSE,
                               solidHeader = TRUE,
                               background = "light-blue",
                               height = "95px"))),
                  tabsetPanel(type = "tabs",
                              tabPanel("Overall",
                                       fluidRow(column(10,
                                                       box(width = NULL,
                                                           collapsible = FALSE,
                                                           solidHeader = TRUE,
                                                           fluidRow(
                                                             column(10, align = "center",
                                                                    splitLayout(
                                                                      shiny::tableOutput("active_users_24hr_summary"),
                                                                      shiny::tableOutput("active_users_7d_summary"),
                                                                      cellWidths = c("50%", "50%"),
                                                                      cellArgs = list(style = "vertical-align: top"))),
                                                             width = 10),
                                                           br(),
                                                           fluidRow(
                                                             column(10, align = "center",
                                                                    plotlyOutput(outputId = "last_online_plot"),
                                                             )),
                                                           br(),
                                                           fluidRow(
                                                             column(10, align = "center",
                                                                    shiny::tableOutput("comp_prog_summary"),
                                                                    shiny::tableOutput("completed_welcome_summary"),
                                                                    shiny::tableOutput("completed_survey_summary"),
                                                                    shiny::tableOutput("all_flows_response"))
                                                           ),
                                                           fluidRow(
                                                             column(12,
                                                                    box( height="300px",  width=12,
                                                                         collapsible = FALSE,
                                                                         title = "Plot of Flows",
                                                                         status = "primary", # primary, success, info, warning, danger
                                                                         solidHeader = TRUE,
                                                                         plotlyOutput(outputId = "plot_flow", height = "240", width = "100%")
                                                                    )
                                                             )
                                                           ) # close fluid row
                                                       ))) # close box, col, fluid row
                              ), # close Overall tab
                              tabPanel("By group",
                                       fluidRow(column(10,
                                                       box(width = NULL,
                                                           collapsible = FALSE,
                                                           solidHeader = TRUE,
                                                           
                                                           fluidRow(
                                                             column(6,
                                                                    uiOutput("groups_engagement")),
                                                           ), #fluid row closure
                                                           
                                                           fluidRow(
                                                             column(10, align = "center",
                                                                    splitLayout(
                                                                      shiny::tableOutput("active_users_24hr_group_summary"),
                                                                      shiny::tableOutput("active_users_7d_group_summary"),
                                                                      cellWidths = c("50%", "50%"),
                                                                      cellArgs = list(style = "vertical-align: top"))),
                                                             width = 10),
                                                           br(),
                                                           fluidRow(
                                                             column(10, align = "center",
                                                                    plotlyOutput(outputId = "last_online_group_plot"),
                                                             )),
                                                           br(),
                                                           fluidRow(
                                                             column(10, align = "center",
                                                                    shinydashboard::valueBoxOutput("comp_prog_group_summary", width = 12),
                                                                    cellArgs = list(style = "vertical-align: top")))
                                                       )))
                              ) # close by group tab
                  ) # close tab type
          ), # close engagement tab
          
         # tabItem(tabname = "parentpals",
        #          fluidRow(
        #            column(10, align = "centre",
        #                   box(splitLayout(h2("Parentpals"), icon("user", "fa-6x"),
        #                                   cellArgs = list(style = "vertical-align: top"),
        ##                                   cellWidths = c("80%", "20%")),
        #                       width = 10,
        ##                       title = NULL,
        #                       collapsible = FALSE,
        #                       solidHeader = TRUE,
        #                       background = "light-blue",
        #                       height = "95px")))
        #  ),
          
          tabItem(tabName = "parentpals",
                  fluidRow(
                    column(10, align = "centre",
                           box(splitLayout(h2("Parent Pals"), icon("user", "fa-6x"),
                                              cellArgs = list(style = "vertical-align:top"),
                                              cellWidths = c("80%", "20%")),
                               width = 10,
                               title = NULL,
                               collapsible = FALSE,
                               solidHeader = TRUE,
                               background = "light-blue",
                               height = "95px"))),
                  fluidRow(
                    box(dataTableOutput('pp_table'),
                        width = 10,
                        title = NULL,
                        collapsible = FALSE,
                        solidHeader = TRUE
                    )
                  )
                  ),
          
          tabItem(tabName = "behaviours",
                  fluidRow(
                    column(10, align = "centre",
                           box(splitLayout(h2("Behaviours"), icon("brain", "fa-6x"),
                                           cellArgs = list(style = "vertical-align: top"),
                                           cellWidths = c("80%", "20%")),
                               width = 10,
                               title = NULL,
                               collapsible = FALSE,
                               solidHeader = TRUE,
                               background = "light-blue",
                               height = "95px"))),
                  tabsetPanel(type = "tabs",
                              tabPanel("Overall",
                                       fluidRow(column(10,
                                                       box(width = NULL,
                                                           collapsible = FALSE,
                                                           solidHeader = TRUE,
                                                           fluidRow(column(6, uiOutput("groups_survey"))),
                                                           fluidRow(
                                                             column(12, align = "center",
                                                                    #splitLayout(
                                                                    shiny::tableOutput("parenting_survey_summary"),
                                                                    plotlyOutput(outputId = "parenting_survey_plot"),#, height = "580px")
                                                                    # cellWidths = c("50%", "50%"),
                                                                    #  cellArgs = list(style = "vertical-align: top"))
                                                             )
                                                           ),
                                                           br(),
                                                           
                                                           
                                                           fluidRow(
                                                             column(12,
                                                                    box(width=12,
                                                                        collapsible = FALSE,
                                                                        title = "Behaviour Problems",
                                                                        status = "primary", # primary, success, info, warning, danger
                                                                        solidHeader = TRUE,
                                                                        splitLayout(
                                                                          plotlyOutput("behaviour_baby_plot"),
                                                                          plotlyOutput("behaviour_child_plot"),
                                                                          cellWidths = c("50%", "50%"),
                                                                          cellArgs = list(style = "vertical-align: top")),
                                                                        splitLayout(
                                                                          plotlyOutput("behaviour_teen_plot"),
                                                                          plotlyOutput("behaviour_default_plot"),
                                                                          cellWidths = c("50%", "50%"),
                                                                          cellArgs = list(style = "vertical-align: top"))
                                                                    )
                                                             )
                                                           ) # close fluid row
                                                       )))), # close box, column, fluid row, tab
                              tabPanel("By group",
                                       fluidRow(column(10,
                                                       box(
                                                         fluidRow(
                                                           column(6,
                                                                  uiOutput("groups_behaviour")),
                                                         ), #fluid row closure
                                                         splitLayout(
                                                           plotlyOutput("behaviour_baby_group_plot"),
                                                           plotlyOutput("behaviour_child_group_plot"),
                                                           cellWidths = c("50%", "50%"),
                                                           cellArgs = list(style = "vertical-align: top")),
                                                         footer = splitLayout(
                                                           plotlyOutput(outputId = "behaviour_teen_group_plot"),
                                                           plotlyOutput(outputId = "behaviour_default_group_plot"),
                                                           cellWidths = c("50%", "50%"),
                                                           cellArgs = list(style = "vertical-align: top")
                                                         ),
                                                         width = 12,
                                                         solidHeader = TRUE,
                                                         status = "primary", # primary, success, info, warning, danger
                                                         title = "Behaviour Problems"
                                                       )))) # close box, column, fluid row, tab
                  ) # close tabsetPanel
          ) # close behaviour tab
        ) # close items
    ) # close body
  ) # close function
  
  # Define server function
  server <- function(input, output) {
    
    autoRefresh <- reactiveTimer(6 * 60 * 60 * 1000)
    
    
    observe({
      autoRefresh()
      
      updated_data <- update_data()
      df <- updated_data[[1]]
      supportive_calm_flow <- updated_data[[2]]
      supportive_praise_flow <- updated_data[[3]]
      check_in_flow_names_flow <- updated_data[[4]]
      content_tip_flow_names_flow <- updated_data[[5]]
      supportive_flow_names_flow <- updated_data[[6]]
      enrolled <- updated_data[[7]]
      parenting_survey <- updated_data[[10]]
      pp_data_frame <- updated_data[[11]]
    })
    
    updated_data <- update_data()
    df <- updated_data[[1]]
    supportive_calm_flow <- updated_data[[2]]
    supportive_praise_flow <- updated_data[[3]]
    check_in_flow_names_flow <- updated_data[[4]]
    content_tip_flow_names_flow <- updated_data[[5]]
    supportive_flow_names_flow <- updated_data[[6]]
    enrolled <- updated_data[[7]]
    true_consent <- updated_data[[8]]
    program <- updated_data[[9]]
    parenting_survey <- updated_data[[10]]
    pp_data_frame <- updated_data[[11]]
    
    # Subset data
    selected_data <- reactive({
      df
    })
    
    output$groups <- renderUI({
      df <- df
      selectInput(
        inputId = "grouper",
        label = "Group variable",
        choices = c("Parent Gender" = "parent_gender",
                    "Child Gender" = "child_gender",
                    "Child Age Group" = "child_age_group"),
        selected = "parent_gender"
      )
    })
    
    output$groups_engagement <- renderUI({
      df <- df
      selectInput(
        inputId = "grouper_engagement",
        label = "Group variable",
        choices = c("Parent Gender" = "parent_gender",
                    "Child Gender" = "child_gender",
                    "Child Age Group" = "child_age_group"),
        selected = "parent_gender"
      )
    })
    
    output$groups_behaviour <- renderUI({
      df <- df
      selectInput(
        inputId = "grouper_behaviour",
        label = "Group variable",
        choices = c("Parent Gender" = "parent_gender",
                    "Child Gender" = "child_gender",
                    "Child Age Group" = "child_age_group"),
        selected = "parent_gender"
      )
    })
    
    output$groups_survey <- renderUI({
      df <- df
      selectInput(
        inputId = "grouper_survey",
        label = "Survey to View",
        choices = c("Baseline" = "Base",
                    "Survey 2" = "2",
                    "Survey 3" = "3",
                    "Survey 4" = "4",
                    "Survey 5" = "5",
                    "Survey 6" = "6",
                    "Survey 7" = "7",
                    "Survey 8" = "8",
                    "Survey 9" = "9"),
        selected = "Base"
      )
    })
    
    observeEvent(input$groupby, {
      if(input$groupby){
        shinyjs::enable("grouper")
      }else{
        shinyjs::disable("grouper")
      }
    })
    
    enrolled_summary_group <- reactive({
      req(input$grouper)
      enrolled_table <- summary_PT(df, c(enrolled, (!!!rlang::syms(input$grouper))), naming_convention = TRUE)
      names(enrolled_table)[length(enrolled_table)] <- "Count"
      enrolled_table
    })
    
    enrolled_summary <- reactive({
      enrolled_table <- summary_PT(df, enrolled, naming_convention = TRUE)
      names(enrolled_table)[2] <- "Count"
      enrolled_table
    })
    
    output$plot_category <- renderPlotly({
      ggplot(df, aes(x = enrolled)) +
        geom_histogram(stat = "count") +
        viridis::scale_fill_viridis(discrete = TRUE, na.value = "navy") +
        labs(x = "Enrolled", y = "Count") +
        theme_classic()
    })
    
    output$plot_category_group <- renderPlotly({
      req(input$grouper)
      ggplot(df, aes(x = enrolled, fill = (!!!rlang::syms(input$grouper)))) +
        geom_histogram(stat = "count") +
        viridis::scale_fill_viridis(discrete = TRUE, na.value = "navy") +
        labs(x = "Enrolled", y = "Count") +
        theme_classic()
    })
    
    output$last_online_plot <- renderPlotly({
      ggplot(df, aes(x = last_online)) +
        geom_point(stat="count") +
        geom_line(stat = "count") +
        labs(x = "Date Last Online", y = "Frequency") +
        viridis::scale_colour_viridis(discrete = TRUE, na.value = "navy") +
        theme_classic()
    })
    
    output$last_online_group_plot <- renderPlotly({
      req(input$grouper_engagement)
      ggplot(df, aes(x = last_online, colour = (!!!rlang::syms(input$grouper_engagement)))) +
        geom_point(stat="count") +
        geom_line(stat = "count") +
        labs(x = "Date Last Online", y = "Frequency") +
        viridis::scale_colour_viridis(discrete = TRUE, na.value = "navy") +
        theme_classic()
    })
    
    output$plot_consent <- renderPlotly({
      ggplot(df, aes(x = consent)) +
        geom_histogram(stat = "count") +
        viridis::scale_fill_viridis(discrete = TRUE, na.value = "navy") +
        labs(x = "Consent", y = "Count") +
        theme_classic()
    })
    
    output$plot_consent_group <- renderPlotly({
      req(input$grouper)
      ggplot(df, aes(x = consent, fill = (!!!rlang::syms(input$grouper)))) +
        geom_histogram(stat = "count") +
        viridis::scale_fill_viridis(discrete = TRUE, na.value = "navy") +
        labs(x = "Consented", y = "Count") +
        theme_classic()
    })
    
    output$parenting_goals_plot <- renderPlotly({
      df_goals <- df %>% group_by(parenting_goals_wrap) %>% summarise(n = n())
      
      fig <- plot_ly(df_goals, labels = ~parenting_goals_wrap, values = ~n, type = 'pie')
      fig %>% layout(xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
                     yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
      
    })
    
    output$recruitment_channel_plot <- renderPlotly({
      df_recruitment <- df %>% group_by(recruitment_channel) %>% summarise(n = n())
      
      fig <- plot_ly(df_recruitment, labels = ~recruitment_channel, values = ~n, type = 'pie')
      fig %>% layout(xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
                     yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
      
    })
    
    output$parenting_goals_group_plot <- renderPlotly({
      req(input$grouper)
      ggplot(df, aes(x = parenting_goals_wrap, fill = (!!!rlang::syms(input$grouper)))) +
        geom_histogram(stat = "count") +
        viridis::scale_fill_viridis(discrete = TRUE, na.value = "navy") +
        labs(x = "Parenting goals", y = "Count") +
        theme_classic()
    })
    
    output$recruitment_channel_group_plot <- renderPlotly({
      req(input$grouper)
      ggplot(df, aes(x = recruitment_channel, fill = (!!!rlang::syms(input$grouper)))) +
        geom_histogram(stat = "count") +
        viridis::scale_fill_viridis(discrete = TRUE, na.value = "navy") +
        labs(x = "Recruitment channel", y = "Count") +
        theme_classic()
    })
    
    consent_summary <- reactive({
      summary_PT(df, "consent", enrolled, "Yes", TRUE, naming_convention = TRUE)
    })
    
    consent_summary_group <- reactive({
      req(input$grouper)
      summary_PT(df, c(consent, !!!rlang::syms(input$grouper)), enrolled, "Yes", TRUE, naming_convention = TRUE)
    })
    
    #language_summary <-  reactive({
    #  summary_PT(df, language, ???, "Yes", TRUE, naming_convention = TRUE)
    #})
    # ??? was true_consent but if it's true_consent then obvs no "Did not respond".
    
    parent_gender_summary <- reactive({
      summary_PT(df, parent_gender, true_consent, "Yes", TRUE, naming_convention = TRUE)
    })
    
    parent_gender_group_summary <- reactive({
      summary_PT(df, c(parent_gender, !!!rlang::syms(input$grouper)), true_consent, "Yes", TRUE, naming_convention = TRUE)
    })
    
    child_gender_summary <- reactive({
      summary_PT(df, child_gender, enrolled, "Yes", TRUE, naming_convention = TRUE)
    })
    
    child_gender_group_summary <- reactive({
      req(input$grouper)
      summary_PT(df, c(child_gender, (!!!rlang::syms(input$grouper))), true_consent, "Yes", TRUE, naming_convention = TRUE)
    })
    child_age_summary <- reactive({
      summary_PT(df, child_age_group, true_consent, "Yes", TRUE, naming_convention = TRUE)
    })
    child_age_group_summary <- reactive({
      req(input$grouper)
      summary_PT(df, c(child_age_group, (!!!rlang::syms(input$grouper))), enrolled, "Yes", TRUE, naming_convention = TRUE)
    })
    parent_child_relationship_summary <- reactive({
      summary_PT(df, parent_child_relationship, true_consent, "Yes", TRUE, naming_convention = TRUE)
    })
    parent_child_relationship_group_summary <- reactive({
      req(input$grouper)
      summary_PT(df, c(parent_child_relationship, !!!rlang::syms(input$grouper)), true_consent, "Yes", TRUE, naming_convention = TRUE)
    })
    child_living_with_disabilities_summary <- reactive({
      summary_PT(df, child_living_with_disabilities, true_consent, "Yes", TRUE, naming_convention = TRUE)
    })
    child_living_with_disabilities_group_summary <- reactive({
      req(input$grouper)
      summary_PT(df, c(child_living_with_disabilities, !!!rlang::syms(input$grouper)), true_consent, "Yes", TRUE, naming_convention = TRUE)
    })
    parent_relationship_status_summary <-  reactive({
      summary_PT(df, parent_relationship_status, true_consent, "Yes", TRUE, naming_convention = TRUE)
    })
    parent_relationship_status_group_summary <-  reactive({
      summary_PT(df, c(parent_relationship_status, !!!rlang::syms(input$grouper)), true_consent, "Yes", TRUE, naming_convention = TRUE)
    })
    active_users_24hr_group_summary <- reactive({
      req(input$grouper_engagement)
      summary_PT(df, c(active_users_24hr, !!!rlang::syms(input$grouper_engagement)), program, together = TRUE, naming_convention = TRUE)
    })
    active_users_24hr_summary <- reactive({
      summary_PT(df, active_users_24hr, program, together = TRUE, naming_convention = TRUE)
    })
    active_users_7d_summary <- reactive({
      summary_PT(df, active_users_7d, program, together = TRUE, naming_convention = TRUE)
    })
    active_users_7d_group_summary <- reactive({
      req(input$grouper_engagement)
      summary_PT(df, c(active_users_7d, !!!rlang::syms(input$grouper_engagement)), program, together = TRUE, naming_convention = TRUE)
    })
    
    comp_prog_summary <- reactive({
      comp_prog_df <- df %>% 
        filter(true_consent == "Yes") %>%
        summarise(program_completion_mean = round(mean(n_skills, na.rm = TRUE), 2),
                  program_completion_sd = round(sd(n_skills, na.rm = TRUE), 2))
      colnames(comp_prog_df) <- naming_conventions(colnames(comp_prog_df))
      comp_prog_df
    })
    
    comp_prog_group_summary <- reactive({
      req(input$grouper_engagement)
      comp_prog_df <- df %>% group_by(!!!rlang::syms(input$grouper_engagement)) %>%
        filter(true_consent == "Yes") %>%
        summarise(program_completion_mean = round(mean(n_skills, na.rm = TRUE), 2),
                  program_completion_sd = round(sd(n_skills, na.rm = TRUE), 2))
      colnames(comp_prog_df) <- naming_conventions(colnames(comp_prog_df))
      comp_prog_df
    })
    
    parent_age_summary <- reactive({
      req(input$grouper)
      parent_age_df <- df %>% 
        filter(true_consent == "Yes") %>%
        summarise(parent_age_mean = round(mean(parent_age, na.rm = TRUE), 2),
                  parent_age_sd = round(sd(parent_age, na.rm = TRUE), 2))
      colnames(parent_age_df) <- naming_conventions(colnames(parent_age_df))
      parent_age_df
    })
    parent_age_group_summary <- reactive({
      req(input$grouper)
      parent_age_df <- df %>% group_by(!!!rlang::syms(input$grouper)) %>%
        filter(true_consent == "Yes") %>%
        summarise(parent_age_mean = round(mean(parent_age, na.rm = TRUE), 2),
                  parent_age_sd = round(sd(parent_age, na.rm = TRUE), 2))
      colnames(parent_age_df) <- naming_conventions(colnames(parent_age_df))
      parent_age_df
    })
    
    completed_welcome_summary <- reactive({
      summary_PT(df, survey_completed_welcome, enrolled, "Yes", TRUE, naming_convention = TRUE)
    })
    
    # Note: These are the *number* of people that have completed the survey
    completed_survey_summary <- reactive({
      df_consent <- df %>%
        filter(true_consent == "Yes")
      survey_completed <- NULL
      survey_completed[[1]] <- df_consent %>% summarise(n = sum(survey_completed_wk1 == 1, na.rm = TRUE))
      survey_completed[[1]]$perc <- survey_completed[[1]]$n/nrow(df_consent) * 100
      survey_completed[[1]]$Week <- "Week 1"
      for (i in 2:9){
        survey_completed[[i]] <- df_consent %>% summarise(n = sum(survey_completed_wk2_plus == i, na.rm = TRUE))
        survey_completed[[i]]$perc <- survey_completed[[i]]$n/nrow(df_consent) * 100
        survey_completed[[i]]$Week <- paste("Week ", i, sep = "")
      }
      survey_completed <- plyr::ldply(survey_completed)
      
      survey_completed <- survey_completed %>%
        mutate("Completed survey (%)" := str_c(`n`, ' (', round(`perc`, 2), ")")) %>%
        dplyr::select(-c(n, perc))
      
      pivot_wider(survey_completed, names_from = Week, values_from = `Completed survey (%)`)
      
    })
    
    completed_survey_group_summary <- reactive({
      req(input$grouper)
      df_consent <- df %>%
        filter(true_consent == "Yes")
      survey_completed <- NULL
      survey_completed[[1]] <- df_consent %>% group_by(!!!rlang::syms(input$grouper)) %>% summarise(n = sum(survey_completed_wk1 == 1, na.rm = TRUE))
      survey_completed[[1]]$perc <- survey_completed[[1]]$n/nrow(df_consent) * 100
      survey_completed[[1]]$Week <- "Week 1"
      for (i in 2:9){
        survey_completed[[i]] <- df_consent %>% group_by(!!!rlang::syms(input$grouper)) %>% summarise(n = sum(survey_completed_wk2_plus == i, na.rm = TRUE))
        survey_completed[[i]]$perc <- survey_completed[[i]]$n/nrow(df_consent) * 100
        survey_completed[[i]]$Week <- paste("Week ", i, sep = "")
      }
      survey_completed <- plyr::ldply(survey_completed)
      
      survey_completed <- survey_completed %>%
        mutate("Completed survey (%)" := str_c(`n`, ' (', round(`perc`, 2), ")")) %>%
        dplyr::select(-c(n, perc))
      
      pivot_wider(survey_completed, names_from = Week, values_from = `Completed survey (%)`)
    })
    
    supportive_calm_flow_df <- flow_data_summary_function(supportive_calm_flow)
    #if (is.null(supportive_calm_flow_df)) { supportive_calm_flow_df <- data.frame(response = c("No", "Yes"), count = c(NA, NA)); colnames(supportive_calm_flow_df)[2] <- "Count (%)"}
    supportive_praise_flow_df <- flow_data_summary_function(supportive_praise_flow)
    #if (is.null(supportive_praise_flow_df)) { supportive_praise_flow_df <- data.frame(response = c("No", "Yes"), count = c(NA, NA)); colnames(supportive_praise_flow_df)[2] <- "Count (%)"}
    supportive_flow_df <- flow_data_summary_function(supportive_flow_names_flow)
    check_in_flow_df <- flow_data_summary_function(check_in_flow_names_flow)
    content_flow_df <- flow_data_summary_function(content_tip_flow_names_flow)
    
    all_flows_response <- reactive({
      all_flows_df <- rbind(content_flow_df, check_in_flow_df, supportive_calm_flow_df, supportive_praise_flow_df, supportive_flow_df)
      all_flows_df <- separate(all_flows_df, `Count (%)`, into = "Value") %>% mutate(Value = as.numeric(as.character(Value)))
      all_flows_df_total <- sum(all_flows_df$Value, na.rm = TRUE) 
      all_flows_df_summary <- all_flows_df %>% group_by(response) %>% summarise(n = sum(Value, na.rm = TRUE),
                                                                                perc = n/all_flows_df_total*100)
      all_flows_df_summary <- all_flows_df_summary %>%
        mutate("Count (%)" := str_c(`n`, ' (', round(`perc`, 2), ")")) %>%
        dplyr::select(-c(n, perc))
      colnames(all_flows_df_summary)[2] <- c("Overall response")
      all_flows_df_summary <- all_flows_df_summary %>% map_df(rev)
      
      colnames(content_flow_df)[2] <- "Content flows"
      colnames(check_in_flow_df)[2] <- "Check-in flows"
      colnames(supportive_calm_flow_df)[2] <- "Calm flow"
      colnames(supportive_praise_flow_df)[2] <- "Praise flow"
      colnames(supportive_flow_df)[2] <- "Other supportive flows"
      
      table_flows_df <- left_join(left_join(left_join(left_join(left_join(content_flow_df, check_in_flow_df), supportive_calm_flow_df), supportive_praise_flow_df), supportive_flow_df), all_flows_df_summary)
      colnames(table_flows_df)[1] <- "Response"
      table_flows_df
    })
    
    # Survey stuff -----------------------------------------------------------------------
    
    parenting_survey_summary <- reactive({
      req(input$grouper_survey)
      
      parenting_survey %>%
        dplyr::filter(week == input$grouper_survey) %>%
        group_by(week, Group) %>%
        summarise(Mean = mean(vals, na.rm = TRUE), SD = sd(vals, na.rm = TRUE), Sum = sum(vals, na.rm = TRUE)) %>%
        mutate(Scale = ifelse(Group %in% c("Food insecurity", "Sexual abuse prevention"), "0-30", "0-7")) %>%
        mutate(Mean = round(Mean, 2),
               SD = round(SD, 2),
               Sum = round(Sum, 0))
    })
    
    output$parenting_survey_plot <- renderPlotly({
      parenting_survey1 <- parenting_survey %>% mutate(week = as.numeric(week)) %>% filter(Group %in% c("Positive parenting", "Child maltreatment", "Stress", "Child Behaviour"))
      parenting_survey_plot <- summarySE(parenting_survey1, groups = c(week, Group), var = vals, na.rm = TRUE)
      ggplot(parenting_survey_plot, aes(x=week, y=mean, colour=Group, group = Group), width = 2) + 
        geom_line() +
        geom_point(data = parenting_survey_plot, aes(size = N)) +
        geom_errorbar(aes(ymin=mean-se, ymax=mean+se), width=.1) +
        viridis::scale_color_viridis(discrete = TRUE) +
        labs(x = "Survey", y = "Frequency", title = "Survey Responses with (SE) Error Bars") +
        scale_x_continuous(breaks = c(1,2,3,4,5,6,7,8,9),
                           labels=c("Baseline", "2", "3", "4", "5", "6", "7", "8", "9")) +
        theme_classic()
    })
    
    output$behaviour_baby_plot <- renderPlotly({
      df_baby <- df %>% filter(child_age_group == "Baby")
      
      ggplot(df_baby, aes(x = challenging_type_wrap)) +
        geom_histogram(stat = "count") +
        viridis::scale_fill_viridis(discrete = TRUE, na.value = "navy") +
        labs(x = NULL, y = NULL) +
        facet_grid(cols = vars(child_age_group)) +
        theme_classic()
    })
    
    output$behaviour_child_plot <- renderPlotly({
      df_child <- df %>% filter(child_age_group == "Child")
      
      ggplot(df_child, aes(x = challenging_type_wrap)) +
        geom_histogram(stat = "count") +
        viridis::scale_fill_viridis(discrete = TRUE, na.value = "navy") +
        labs(x = NULL, y = NULL) +
        facet_grid(cols = vars(child_age_group)) +
        theme_classic()
    })
    
    output$behaviour_teen_plot <- renderPlotly({
      df_teen <- df %>% filter(child_age_group == "Teen")
      
      ggplot(df_teen, aes(x = challenging_type_wrap)) +
        geom_histogram(stat = "count") +
        viridis::scale_fill_viridis(discrete = TRUE, na.value = "navy") +
        labs(x = NULL, y = NULL) +
        facet_grid(cols = vars(child_age_group)) +
        theme_classic()
    })
    
    output$behaviour_default_plot <- renderPlotly({
      df_default <- df %>% filter(child_age_group == "Default")
      
      ggplot(df_default, aes(x = challenging_type_wrap)) +
        geom_histogram(stat = "count") +
        viridis::scale_fill_viridis(discrete = TRUE, na.value = "navy") +
        labs(x = NULL, y = NULL) +
        facet_grid(cols = vars(child_age_group)) +
        theme_classic()
    })
    
    output$behaviour_baby_group_plot <- renderPlotly({
      req(input$grouper_behaviour)
      df_baby <- df %>% filter(child_age_group == "Baby")
      
      ggplot(df_baby, aes(x = challenging_type_wrap, fill = (!!!rlang::syms(input$grouper_behaviour)))) +
        geom_histogram(stat = "count") +
        viridis::scale_fill_viridis(discrete = TRUE, na.value = "navy") +
        labs(x = NULL, y = NULL) +
        facet_grid(cols = vars(child_age_group)) +
        theme_classic()
      
    })
    
    output$behaviour_child_group_plot <- renderPlotly({
      req(input$grouper_behaviour)
      df_child <- df %>% filter(child_age_group == "Child")
      
      ggplot(df_child, aes(x = challenging_type_wrap, fill = (!!!rlang::syms(input$grouper_behaviour)))) +
        geom_histogram(stat = "count") +
        viridis::scale_fill_viridis(discrete = TRUE, na.value = "navy") +
        labs(x = NULL, y = NULL) +
        facet_grid(cols = vars(child_age_group)) +
        theme_classic()
      
    })
    
    output$behaviour_teen_group_plot <- renderPlotly({
      req(input$grouper_behaviour)
      df_teen <- df %>% filter(child_age_group == "Teen")
      
      ggplot(df_teen, aes(x = challenging_type_wrap, fill = (!!!rlang::syms(input$grouper_behaviour)))) +
        geom_histogram(stat = "count") +
        viridis::scale_fill_viridis(discrete = TRUE, na.value = "navy") +
        labs(x = NULL, y = NULL) +
        facet_grid(cols = vars(child_age_group)) +
        theme_classic()
      
    })
    
    output$behaviour_default_group_plot <- renderPlotly({
      req(input$grouper_behaviour)
      df_default <- df %>% filter(child_age_group == "Default")
      
      ggplot(df_default, aes(x = challenging_type_wrap, fill = (!!!rlang::syms(input$grouper_behaviour)))) +
        geom_histogram(stat = "count") +
        viridis::scale_fill_viridis(discrete = TRUE, na.value = "navy") +
        labs(x = NULL, y = NULL) +
        facet_grid(cols = vars(child_age_group)) +
        theme_classic()
    })
    
    # Flows stuff ------------------------------------------------------------
    
    output$plot_flow <- renderPlotly({
      colnames(supportive_calm_flow_df)[2] <- "Supportive - Calm flow"
      colnames(supportive_praise_flow_df)[2] <- "Supportive - Praise flow"
      colnames(supportive_flow_df)[2] <- "Supportive flow"
      colnames(check_in_flow_df)[2] <- "Check-in flows"
      colnames(content_flow_df)[2] <- "Content flows"
      table_flows_df <- left_join(left_join(left_join(left_join(supportive_calm_flow_df, supportive_praise_flow_df), supportive_flow_df), check_in_flow_df), content_flow_df)
      colnames(table_flows_df)[1] <- "Response"
      flow_pivot <- pivot_longer(table_flows_df,
                                 cols = c(`Supportive - Calm flow`, `Supportive - Praise flow`, `Supportive flow`, `Check-in flows`, `Content flows`),
                                 names_to = "Flow name",
                                 values_to = "Value") %>%
        separate(Value, into = "Value") %>%
        mutate(Value = as.numeric(as.character(Value)))
      
      ggplot(flow_pivot, aes(x = Response, y = Value, fill = `Flow name`)) +
        geom_bar(stat = "identity") +
        viridis::scale_fill_viridis(discrete = TRUE, na.value = "navy") +
        theme_classic()
    })
    
    # Output render ------------------------------------------------------------
    
    df_enrolled <- summary_PT(df,  enrolled,  enrolled, "Yes")
    df_enrolled <- df_enrolled %>% mutate(group =  enrolled, count = enrolled_n) %>% dplyr::select(c(group, count))
    
    df_consented <- summary_PT(df,  true_consent,  true_consent, "Yes")
    df_consented <- df_consented %>% mutate(group =  true_consent, count = true_consent_n) %>% dplyr::select(c(group, count))
    
    df_program <- summary_PT(df,  program,  program, "Yes")
    df_program <- df_program %>% mutate(group =  program, count = program_n) %>% dplyr::select(c(group, count))
    
    df_active_24 <- (summary_PT(df, active_users_24hr, program) %>% filter(active_users_24hr == "Yes"))$active_users_24hr_n
    df_active_7d <- (summary_PT(df, active_users_7d, program) %>% filter(active_users_7d == "Yes"))$active_users_7d_n
    
    output$myvaluebox1 <- shinydashboard::renderValueBox({
      shinydashboard::valueBox(df_enrolled$count[1], subtitle = "Enrolled", icon = icon("user"),
                               color = "aqua"
      )
    })
    output$myvaluebox2 <- shinydashboard::renderValueBox({
      shinydashboard::valueBox(df_consented$count[1],subtitle = "Consented",icon = icon("check"),
                               color = "green"
      )
    })
    output$myvaluebox3 <- shinydashboard::renderValueBox({
      shinydashboard::valueBox(df_program$count[1],subtitle = "In Program",icon = icon("clipboard"),
                               color = "yellow"
      )
    })
    output$myvaluebox4 <- shinydashboard::renderValueBox({
      shinydashboard::valueBox(df_active_24,subtitle = "Active in last 24 hours",icon = icon("clock"),
                               color = "purple"
      )
    })
    output$myvaluebox5 <- shinydashboard::renderValueBox({
      shinydashboard::valueBox(df_active_7d, subtitle = "Active in last 7 days", icon = icon("signal"),
                               color = "fuchsia"
      )
    })
    output$pp_table <- renderDataTable(pp_data_frame,
                                       options = list(
                                         pageLength = 5)
                                       )
    output$enrolled_summary <- shiny::renderTable({(enrolled_summary())}, striped = TRUE)
    output$enrolled_summary_group <- shiny::renderTable({(enrolled_summary_group())}, striped = TRUE)
    output$consent_summary <- shiny::renderTable({(consent_summary())}, striped = TRUE)
    output$consent_summary_group <- shiny::renderTable({(consent_summary_group())}, striped = TRUE)
    #output$language_summary <- shiny::renderTable({(language_summary())}, striped = TRUE)
    output$parent_gender_summary <- shiny::renderTable({(parent_gender_summary())}, striped = TRUE)
    output$parent_gender_group_summary <- shiny::renderTable({(parent_gender_group_summary())}, striped = TRUE)
    output$parent_age_summary <- shiny::renderTable({(parent_age_summary())}, striped = TRUE)
    output$parent_age_group_summary <- shiny::renderTable({(parent_age_group_summary())}, striped = TRUE)
    output$child_gender_summary <- shiny::renderTable({(child_gender_summary())}, striped = TRUE)
    output$child_gender_group_summary <- shiny::renderTable({(child_gender_group_summary())}, striped = TRUE)
    output$child_age_summary <- shiny::renderTable({(child_age_summary())}, striped = TRUE)
    output$child_age_group_summary <- shiny::renderTable({(child_age_group_summary())}, striped = TRUE)
    output$parent_child_relationship_summary <- shiny::renderTable({(parent_child_relationship_summary())}, caption = "Relationship between the parent and child", striped = TRUE)
    output$parent_child_relationship_group_summary <- shiny::renderTable({(parent_child_relationship_group_summary())}, caption = "Relationship between the parent and child", striped = TRUE)
    output$parent_relationship_status_group_summary <- shiny::renderTable({(parent_relationship_status_group_summary())}, caption = "Relationship status of the parent", striped = TRUE)
    output$parent_relationship_status_summary <- shiny::renderTable({(parent_relationship_status_summary())}, caption = "Relationship status of the parent", striped = TRUE)
    output$child_living_with_disabilities_summary <- shiny::renderTable({(child_living_with_disabilities_summary())}, caption = "Does the child have a disability?", striped = TRUE)
    output$child_living_with_disabilities_group_summary <- shiny::renderTable({(child_living_with_disabilities_group_summary())}, caption = "Does the child have a disability?", striped = TRUE)
    output$active_users_24hr_summary <- shiny::renderTable({(active_users_24hr_summary())}, striped = TRUE)
    output$active_users_24hr_group_summary <- shiny::renderTable({(active_users_24hr_group_summary())}, striped = TRUE)
    output$active_users_7d_summary <- shiny::renderTable({(active_users_7d_summary())}, striped = TRUE)
    output$active_users_7d_group_summary <- shiny::renderTable({(active_users_7d_group_summary())}, striped = TRUE)
    output$comp_prog_summary <- shiny::renderTable({(comp_prog_summary())}, caption = "Number of skills in toolkit", striped = TRUE)
    output$comp_prog_group_summary <- shiny::renderTable({(comp_prog_group_summary())}, caption = "Number of skills in toolkit", striped = TRUE)
    output$completed_welcome_summary <- shiny::renderTable({completed_welcome_summary()}, striped = TRUE, caption = "Number (and percentage) of individuals who have completed the welcome survey")
    output$completed_survey_summary <- shiny::renderTable({{completed_survey_summary()}}, striped = TRUE, caption = "Number (and percentage) of individuals who have completed different surveys")
    output$completed_survey_group_summary <- shiny::renderTable({{completed_survey_group_summary()}}, striped = TRUE, caption = "Number (and percentage) of individuals who have completed different surveys")
    output$all_flows_response <- shiny::renderTable({(all_flows_response())}, caption = "Count (%) for each flow", striped = TRUE)
    output$parenting_survey_summary <- shiny::renderTable({(parenting_survey_summary())}, caption = "How many times in the past week ... \n For Sexual abuse prevention, the timeframe is how many days in the past month.", striped = TRUE)
  }
  
  # Create Shiny object
  shinyApp(ui = ui, server = server)
  
}
