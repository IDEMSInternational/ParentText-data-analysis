shinyApp(ui=u, server=s)
server <- function(input, output) {
observe({
if(is.null(input$checkbox))
setboxon(FALSE)
else if(input$checkbox==FALSE)
setboxon(FALSE)
})
output$make_box <- renderUI({
checkboxInput("checkbox", label = "Choice A", value = TRUE)
})
# check status off checkbox value
output$value <- renderPrint({ input$checkbox })
}
ui <- fluidPage(
# plot checkbox
uiOutput("make_box"),
hr(),
# output check
fluidRow(column(3, verbatimTextOutput("value")))
)
shinyApp(ui=ui, server=server)
u <- fluidPage(
ui <- dashboardPage(
header = dashboardHeader(title = "Dashboard"),
sidebar = dashboardSidebar(),
dashboardBody(fluidRow(box(checkboxInput("check1", "disable/enable", value = F),
uiOutput("slidr1"))))
)
)
s <- function(input, output, session){
output$slidr1 <- renderUI({
sliderInput("slider1","Value 1",min=1,max=8,value=3)
})
# Want the initial state of this button to be disabled?
shinyjs::disable(id="slider1")
observe({
if (input$check1) shinyjs::disable(id="slider1")
else shinyjs::enable(id="slider1")
})
}
shinyApp(ui=u, server=s)
?shinyjs::disable
?disable
u <- fluidPage(
useShinyjs()
ui <- dashboardPage(
header = dashboardHeader(title = "Dashboard"),
sidebar = dashboardSidebar(),
dashboardBody(fluidRow(box(checkboxInput("check1", "disable/enable", value = F),
uiOutput("slidr1"))))
)
)
u <- fluidPage(
useShinyjs(),
ui <- dashboardPage(
header = dashboardHeader(title = "Dashboard"),
sidebar = dashboardSidebar(),
dashboardBody(fluidRow(box(checkboxInput("check1", "disable/enable", value = F),
uiOutput("slidr1"))))
)
)
s <- function(input, output, session){
output$slidr1 <- renderUI({
sliderInput("slider1","Value 1",min=1,max=8,value=3)
})
# Want the initial state of this button to be disabled?
shinyjs::disable(id="slider1")
observe({
if (input$check1) shinyjs::disable(id="slider1")
else shinyjs::enable(id="slider1")
})
}
shinyApp(ui=u, server=s)
source("R Shiny Template.R")
source("Data Cleaning.R")
parenttext_shiny(country = country, date_from = default_date_from, date_to = default_date_to, include_archived_data = include_archived_data)
source("R Shiny Template.R")
source("Data Cleaning.R")
parenttext_shiny(country = country, date_from = default_date_from, date_to = default_date_to, include_archived_data = include_archived_data)
source("R Shiny Template.R")
source("Data Cleaning.R")
parenttext_shiny(country = country, date_from = default_date_from, date_to = default_date_to, include_archived_data = include_archived_data)
source("R Shiny Template.R")
source("Data Cleaning.R")
parenttext_shiny(country = country, date_from = default_date_from, date_to = default_date_to, include_archived_data = include_archived_data)
source("R Shiny Template.R")
source("Data Cleaning.R")
parenttext_shiny(country = country, date_from = default_date_from, date_to = default_date_to, include_archived_data = include_archived_data)
country <- "Jamaica" # Jamaica, Philippines, South Africa, Malaysia
source("Functions.R")
source(paste0(country, "_dashboard_settings.R"))
source("R Shiny Template.R")
source("Data Cleaning.R")
parenttext_shiny(country = country, date_from = default_date_from, date_to = default_date_to, include_archived_data = include_archived_data)
key
key <- "78ab958865821e845ea0e6d2579929a009f62deb"
source("R Shiny Template.R")
source("Data Cleaning.R")
parenttext_shiny(country = country, date_from = default_date_from, date_to = default_date_to, include_archived_data = include_archived_data)
source("R Shiny Template.R")
source("Data Cleaning.R")
parenttext_shiny(country = country, date_from = default_date_from, date_to = default_date_to, include_archived_data = include_archived_data)
source("R Shiny Template.R")
source("Data Cleaning.R")
parenttext_shiny(country = country, date_from = default_date_from, date_to = default_date_to, include_archived_data = include_archived_data)
country <- "Jamaica" # Jamaica, Philippines, South Africa, Malaysia
source("Functions.R")
source(paste0(country, "_dashboard_settings.R"))
key <- "78ab958865821e845ea0e6d2579929a009f62deb"
source("R Shiny Template.R")
source("Data Cleaning.R")
parenttext_shiny(country = country, date_from = default_date_from, date_to = default_date_to, include_archived_data = include_archived_data)
u <- fluidPage(
useShinyjs(),
ui <- dashboardPage(
header = dashboardHeader(title = "Dashboard"),
sidebar = dashboardSidebar(),
dashboardBody(fluidRow(box(checkboxInput("check1", "disable/enable", value = F),
uiOutput("slidr1"))))
)
)
s <- function(input, output, session){
output$slidr1 <- renderUI({
sliderInput("slider1","Value 1",min=1,max=8,value=3)
})
# Want the initial state of this button to be disabled?
shinyjs::disable(id="slider1")
observe({
if (input$check1) shinyjs::disable(id="slider1")
else shinyjs::enable(id="slider1")
})
}
shinyApp(ui=u, server=s)
u <- fluidPage(
useShinyjs(),
ui <- dashboardPage(
header = dashboardHeader(title = "Dashboard"),
sidebar = dashboardSidebar(),
dashboardBody(fluidRow(box(checkboxInput("check1", "disable/enable", value = F),
uiOutput("slidr1"))))
)
)
s <- function(input, output, session){
output$slidr1 <- renderUI({
sliderInput("slider1","Value 1",min=1,max=8,value=3)
})
# Want the initial state of this button to be disabled?
shinyjs::disable(id="slider1")
observe({
if (input$check1) shinyjs::enable(id="slider1")
else shinyjs::disable(id="slider1")
})
}
shinyApp(ui=u, server=s)
u <- fluidPage(
useShinyjs(),
ui <- dashboardPage(
header = dashboardHeader(title = "Dashboard"),
sidebar = dashboardSidebar(),
dashboardBody(fluidRow(box(checkboxInput("check1", "disable/enable", value = F),
uiOutput("slidr1"))))
)
)
s <- function(input, output, session){
output$slidr1 <- renderUI({
sliderInput("slider1","Value 1",min=1,max=8,value=3)
})
# Want the initial state of this button to be disabled?
observe({
if (input$check1) shinyjs::enable(id="slider1")
else shinyjs::disable(id="slider1")
})
shinyjs::disable(id="slider1")
}
shinyApp(ui=u, server=s)
u <- fluidPage(
useShinyjs(),
ui <- dashboardPage(
header = dashboardHeader(title = "Dashboard"),
sidebar = dashboardSidebar(),
dashboardBody(fluidRow(box(checkboxInput("check1", "disable/enable", value = F),
uiOutput("slidr1"))))
)
)
s <- function(input, output, session){
output$slidr1 <- renderUI({
sliderInput("slider1","Value 1",min=1,max=8,value=3)
})
# Want the initial state of this button to be disabled?
observe({
shinyjs::disable(id="slider1")
if (input$check1) shinyjs::enable(id="slider1")
else shinyjs::disable(id="slider1")
})
}
shinyApp(ui=u, server=s)
u <- fluidPage(
useShinyjs(),
ui <- dashboardPage(
header = dashboardHeader(title = "Dashboard"),
sidebar = dashboardSidebar(),
dashboardBody(fluidRow(box(checkboxInput("check1", "disable/enable", value = F),
uiOutput("slidr1"))))
)
)
s <- function(input, output, session){
output$slidr1 <- renderUI({
sliderInput("slider1","Value 1",min=1,max=8,value=3)
})
# Want the initial state of this button to be disabled?
observe({
shinyjs::disable(id="slider1")
if (!is.null(input$check1)) shinyjs::enable(id="slider1")
else shinyjs::disable(id="slider1")
})
}
shinyApp(ui=u, server=s)
u <- fluidPage(
useShinyjs(),
ui <- dashboardPage(
header = dashboardHeader(title = "Dashboard"),
sidebar = dashboardSidebar(),
dashboardBody(fluidRow(box(checkboxInput("check1", "disable/enable", value = F),
uiOutput("slidr1"))))
)
)
s <- function(input, output, session){
output$slidr1 <- renderUI({
sliderInput("slider1","Value 1",min=1,max=8,value=3)
})
# Want the initial state of this button to be disabled?
shinyjs::disable(id="slider1")
observeEvent({
shinyjs::disable(id="slider1")
if (input$check1) shinyjs::enable(id="slider1")
else shinyjs::disable(id="slider1")
})
}
shinyApp(ui=u, server=s)
u <- fluidPage(
useShinyjs(),
ui <- dashboardPage(
header = dashboardHeader(title = "Dashboard"),
sidebar = dashboardSidebar(),
dashboardBody(fluidRow(box(checkboxInput("check1", "disable/enable", value = F),
uiOutput("slidr1"))))
)
)
s <- function(input, output, session){
output$slidr1 <- renderUI({
sliderInput("slider1","Value 1",min=1,max=8,value=3)
})
# Want the initial state of this button to be disabled?
shinyjs::disable(id="slider1")
observeEvent(input$check1, {
shinyjs::disable(id="slider1")
if (input$check1) shinyjs::enable(id="slider1")
else shinyjs::disable(id="slider1")
})
}
shinyApp(ui=u, server=s)
u <- fluidPage(
useShinyjs(),
sidebarPanel("sidebar panel",
checkboxInput("check1", "disable/enable", value = F),
uiOutput("slidr1"),
checkboxInput("check2", "disable/enable", value = F),
uiOutput("slidr2"),
checkboxInput("check3", "disable/enable", value = F),
uiOutput("slidr3")
),
mainPanel("main panel")
)
s <- function(input, output, session){
output$slidr1 <- renderUI({
sliderInput("slider1","Value 1",min=1,max=8,value=3)
})
output$slidr2 <- renderUI({
req(input$slider1)
max2 <- reactive({9-(input$slider1 )})
sliderInput("slider2","Value 2",min=1,max=max2(),value=3)
})
output$slidr3 <- renderUI({
req(input$slider1,input$slider2)
max3 <- reactive({10-(input$slider1 + input$slider2)})
sliderInput("slider3","Value 3",min=1,max=max3(),value=3)
})
# Want the initial state of this button to be disabled?
shinyjs::disable(id="slider1")
observeEvent(input$check1,{
if (input$check1) shinyjs::disable(id="slider1")
else shinyjs::enable(id="slider1")
})
observeEvent(input$check2,{
if (input$check2) shinyjs::disable(id="slider2")
else shinyjs::enable(id="slider2")
})
observeEvent(input$check3,{
if (input$check3) shinyjs::disable(id="slider3")
else shinyjs::enable(id="slider3")
})
}
shinyApp(ui=u, server=s)
u <- fluidPage(
useShinyjs(),
ui <- dashboardPage(
header = dashboardHeader(title = "Dashboard"),
sidebar = dashboardSidebar(),
dashboardBody(fluidRow(box(checkboxInput("check1", "disable/enable", value = F),
uiOutput("slidr1"))))
)
)
s <- function(input, output, session){
output$slidr1 <- renderUI({
sliderInput("slider1","Value 1",min=1,max=8,value=3)
})
# Want the initial state of this button to be disabled?
shinyjs::disable(id="slidr1")
observeEvent(input$check1, {
shinyjs::disable(id="slider1")
if (input$check1) shinyjs::enable(id="slider1")
else shinyjs::disable(id="slider1")
})
}
shinyApp(ui=u, server=s)
u <- fluidPage(
useShinyjs(),
ui <- dashboardPage(
header = dashboardHeader(title = "Dashboard"),
sidebar = dashboardSidebar(),
dashboardBody(fluidRow(box(checkboxInput("check1", "disable/enable", value = F),
uiOutput("slidr1"))))
)
)
s <- function(input, output, session){
output$slidr1 <- renderUI({
sliderInput("slider1","Value 1",min=1,max=8,value=3)
})
# Want the initial state of this button to be disabled?
observeEvent(input$check1, {
shinyjs::disable(id="slidr1")
shinyjs::disable(id="slider1")
if (input$check1) shinyjs::enable(id="slider1")
else shinyjs::disable(id="slider1")
})
}
shinyApp(ui=u, server=s)
?shinyjs::disable
if (interactive()) {
library(shiny)
shinyApp(
ui = fluidPage(
useShinyjs(),  # Set up shinyjs
actionButton("btn", "Click me"),
disabled(
textInput("element", NULL, "I was born disabled")
)
),
server = function(input, output) {
observeEvent(input$btn, {
enable("element")
})
}
)
}
library(shiny)
disabled(numericInput("num", NULL, 5), dateInput("date", NULL))
if (interactive()) {
library(shiny)
shinyApp(
ui = fluidPage(
useShinyjs(),  # Set up shinyjs
actionButton("btn", "Click me"),
disabled(
textInput("element", NULL, "I was born disabled")
)
),
server = function(input, output) {
observeEvent(input$btn, {
enable("element")
})
}
)
}
library(shiny)
disabled(numericInput("num", NULL, 5), dateInput("date", NULL))
if (interactive()) {
library(shiny)
shinyApp(
ui = fluidPage(
useShinyjs(),  # Set up shinyjs
actionButton("btn", "Click me"),
disabled(
textInput("element", NULL, "I was born disabled")
)
),
server = function(input, output) {
observeEvent(input$btn, {
enable("element")
})
}
)
}
?disabled
u <- fluidPage(
useShinyjs(),
ui <- dashboardPage(
header = dashboardHeader(title = "Dashboard"),
sidebar = dashboardSidebar(),
dashboardBody(fluidRow(box(checkboxInput("check1", "disable/enable", value = F),
uiOutput("slidr1"))))
)
)
s <- function(input, output, session){
output$slidr1 <- renderUI({
sliderInput("slider1","Value 1",min=1,max=8,value=3)
})
# Want the initial state of this button to be disabled?
observeEvent(input$check1, {
shinyjs::disabled(id="slider1")
if (input$check1) shinyjs::enable(id="slider1")
else shinyjs::disable(id="slider1")
})
}
shinyApp(ui=u, server=s)
u <- fluidPage(
useShinyjs(),
ui <- dashboardPage(
header = dashboardHeader(title = "Dashboard"),
sidebar = dashboardSidebar(),
dashboardBody(fluidRow(box(checkboxInput("check1", "disable/enable", value = F),
uiOutput("slidr1"))))
)
)
s <- function(input, output, session){
output$slidr1 <- renderUI({
sliderInput("slider1","Value 1",min=1,max=8,value=3)
})
# Want the initial state of this button to be disabled?
observeEvent(input$check1, {
shinyjs::disabled("slider1")
if (input$check1) shinyjs::enable(id="slider1")
else shinyjs::disable(id="slider1")
})
}
shinyApp(ui=u, server=s)
u <- fluidPage(
useShinyjs(),
ui <- dashboardPage(
header = dashboardHeader(title = "Dashboard"),
sidebar = dashboardSidebar(),
dashboardBody(fluidRow(box(checkboxInput("check1", "disable/enable", value = F),
uiOutput("slidr1"))))
)
)
s <- function(input, output, session){
output$slidr1 <- renderUI({
shinyjs::disabled(sliderInput("slider1","Value 1",min=1,max=8,value=3))
})
# Want the initial state of this button to be disabled?
observeEvent(input$check1, {
if (input$check1) shinyjs::enable(id="slider1")
else shinyjs::disable(id="slider1")
})
}
shinyApp(ui=u, server=s)
source("~/GitHub/ParentText-data-analysis/R Code/R Shiny Template.R")
source("R Shiny Template.R")
source("Data Cleaning.R")
parenttext_shiny(country = country, date_from = default_date_from, date_to = default_date_to, include_archived_data = include_archived_data)
source("~/GitHub/ParentText-data-analysis/R Code/R Shiny Template.R")
source("Data Cleaning.R")
parenttext_shiny(country = country, date_from = default_date_from, date_to = default_date_to, include_archived_data = include_archived_data)
country <- "Jamaica" # Jamaica, Philippines, South Africa, Malaysia
source("Functions.R")
source(paste0(country, "_dashboard_settings.R"))
source("R Shiny Template.R")
source("Data Cleaning.R")
parenttext_shiny(country = country, date_from = default_date_from, date_to = default_date_to, include_archived_data = include_archived_data)
country <- "Jamaica" # Jamaica, Philippines, South Africa, Malaysia
source("Functions.R")
source(paste0(country, "_dashboard_settings.R"))
source("R Shiny Template.R")
source("Data Cleaning.R")
parenttext_shiny(country = country, date_from = default_date_from, date_to = default_date_to, include_archived_data = include_archived_data)
library(rapidpror)
library(tidyverse)
country <- "Jamaica"
set_rapidpro_site(site = site)
set_rapidpro_key(key = key[[1]])
set_rapidpro_uuid_names()
contacts_unflat <- get_user_data(flatten = FALSE)
key <- read.table("tokens/PT_jamaica_key.txt", quote="\"", comment.char="")
site <- "http://rapidpro.ilhasoft.mobi/api/v2/"
key
x <- NULL
x[[1]] <- mtcars
x[[2]] <- c(2,2,2,4)
unlist(x)
as.list(unlist(x))
library(gtsummary)
library(writexl)
install.packages("gtsummary")
library(gtsummary)
gt_table <- trial %>%
tbl_summary()
# convert to tibble, then write to xlsx
gt_table %>%
gtsummary::as_tibble() %>%
writexl::write_xlsx(., "example_gtsummary1.xlsx")
install.packages("gtsummary")
