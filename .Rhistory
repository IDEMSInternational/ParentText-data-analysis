#' Interaction with api
source('~/ParentText-data-analysis/Functions.R', echo=TRUE)
library(httr)
library(jsonlite)
library(tidyverse)
library(dplyr)
install.packages("rlang")
library(dplyr)
install.packages("pillar")
install.packages("pillar")
library(dplyr)
library(httr)
library(jsonlite)
library(tidyverse)
library(dplyr)
library(httr)
library(jsonlite)
library(tidyverse)
remove.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
library(httr)
library(jsonlite)
library(tidyverse)
library(dplyr)
install.packages("httr")
install.packages("jsonlite")
install.packages("tidyverse")
source('~/ParentText-data-analysis/Functions.R', echo=TRUE)
library(httr)
library(jsonlite)
library(tidyverse)
set_rapidpro_key(key = "2c8530c96abf61b648431448c2d368e2d28e5b8f")
set_rapidpro_site(site = "https://rapidpro.idems.international/api/v2/")
set_rapidpro_uuid_names()
get_rapidpro_uuid_names()
source('~/ParentText-data-analysis/RapidPro Data Wide.R', echo=TRUE)
source('~/ParentText-data-analysis/Functions.R', echo=TRUE)
contacts_unflat <- get_user_data(flatten = FALSE)
source('~/ParentText-data-analysis/Table7.R', echo=TRUE)
contacts_unflat <- get_user_data(flatten = FALSE)
parent_gender <- contacts_unflat$fields$gender
child_age_group <- contacts_unflat$fields$age_group_for_tips
parent_gender <- factor(ifelse(parent_gender %in% c("female", "f", "woman", "Woman"), "Woman",
ifelse(parent_gender %in% c("male", "m", "man", "Man"), "Man",
parent_gender)))
child_age_group <- forcats::fct_recode(child_age_group,
Baby = "baby",
Child = "child",
Teen = "teen")
child_gender <- factor(child_gender)
enrolled <- NULL
parent_gender_summary <- summary_PT(df, parent_gender, enrolled, "Yes")
library(jsonlite)
set_rapidpro_key(key = "b6e753174017ea75090d37ccf188d9fa7d6735dd")
set_rapidpro_uuid_names()
child_age_group <- contacts_unflat$fields$age_group_for_tips
consent <- NULL
df <- data.frame(enrolled, consent, program, parent_gender, child_gender, child_age_group)
consent_summary <- summary_PT(df, consent, enrolled, "Yes")
child_gender_summary <- summary_PT(df, child_gender, enrolled, "Yes")
active_users_7d <- Sys.time() - as.POSIXct(contacts_unflat$last_seen_on, format="%Y-%m-%dT%H:%M:%OS") <= 7
active_users_24hr <- summary_PT(df, active_users_24hr, program)
active_users_7d <- summary_PT(df, active_users_7d, program)
parent_age <- as.numeric(as.character(contacts_unflat$fields$age))
df %>% filter(program == "No") %>% nrow(.)
contacts_unflat$fields$exit_message
n_skills <- as.numeric(as.character(contacts_unflat$fields$n_skills))
df <- data.frame(df, n_skills)
df %>% summarise(comp_prog_mean = mean(n_skills, na.rm = TRUE),
comp_prog_sd = sd(n_skills, na.rm = TRUE))
View(df)
source("~/ParentText-data-analysis/Functions.R", echo=TRUE)
library(shiny); runApp('ParentText-data-analysis/Shiny - Table 7.R')
setwd("~/ParentText-data-analysis")
source("~/ParentText-data-analysis/Functions.R", echo=TRUE)
source("~/ParentText-data-analysis/Code Book.R", echo=TRUE)
library(shiny); runApp('Shiny - Table 7.R')
source("~/ParentText-data-analysis/Functions.R", echo=TRUE)
getwd()
library(shiny); runApp('Shiny - Table 7.R')
library(shiny); runApp('Shiny - Table 7.R')
install.packages('rsconnect')
rsconnect::setAccountInfo(name='parenttext', token='D144D5FD3F6A47F0F35D21CA4A7DE884', secret='spXCK0nkh8L4zLcJ2HZ+vQeT12WXqdiMCJV6/Fpi')
library(rsconnect)
?rsconnect::deployApp("")
rsconnect::deployApp(appTitle = "ParentText Malaysia")
rsconnect::deployApp(appTitle = "ParentText Malaysia", appPrimaryDoc = "Shiny - Table 7.R")
runApp('Shiny - Table 7.R')
runApp('Shiny - Table 7.R')
?as.POSIXct
as.POSIXct(Sys.time(), tz = "UTC", format="%Y-%m-%dT%H:%M:%OS")
as.POSIXct(Sys.time(), tz = "GMT", format="%Y-%m-%dT%H:%M:%OS")
as.POSIXct(contacts_unflat$last_seen_on, format="%Y-%m-%dT%H:%M:%OS")
# Load packages
library(shiny)
library(shinythemes)
library(shinyjs)
#library(rpivotTable)
library(plotly)
library(shinydashboard)
library(httr)
library(jsonlite)
library(tidyverse)
source("Functions.R")
# source("Code Book.R")
# RapidPro set up --------------------------------------------------------------
# for this to work you need to change the directory to where the token key is stored.
key <- read.table("./tokens/PT_malaysia_key.txt", quote="\"", comment.char="")
set_rapidpro_key(key = key)
set_rapidpro_site(site = "https://app.rapidpro.io/api/v2/")
set_rapidpro_uuid_names()
contacts_unflat <- get_user_data(flatten = FALSE)
# Variables Manipulation -------------------------------------------------------
# get enrolled and consented data
enrolled <- NULL
consent <- NULL
program <- NULL
for (i in 1:length(contacts_unflat$groups)){
contact_name <- contacts_unflat$groups[[i]]
if (length(contact_name)==0) {
enrolled[i] <- NA
consent[i] <- NA
program[i] <- NA
} else{
enrolled[i] <- ifelse(any(contact_name$name %in% "joined"), "Yes", "No")
consent[i] <- ifelse(any(contact_name$name %in% "consent"), "Yes", "No")
program[i] <- ifelse(any(contact_name$name %in% "in program"), "Yes", "No")
}
}
parent_gender <- contacts_unflat$fields$gender
parent_gender <- factor(ifelse(parent_gender %in% c("female", "f", "woman", "Woman"), "Woman",
ifelse(parent_gender %in% c("male", "m", "man", "Man"), "Man",
ifelse(parent_gender %in% "no", NA, parent_gender))))
child_age_group <- contacts_unflat$fields$age_group_for_tips
know_age_group <- contacts_unflat$fields$know_age_group_for_tips
child_age_group <- ifelse(child_age_group == "child" & know_age_group == "no", "Default", child_age_group)
child_age_group <- factor(child_age_group)
child_age_group <- forcats::fct_recode(child_age_group,
Baby = "baby",
Child = "child",
Teen = "teen")
child_gender <- factor(contacts_unflat$fields$survey_behave_sex)
child_gender <-  forcats::fct_recode(child_gender,
Boy = "male",
Girl = "female",
`Prefer not to say` = "no")
parent_child_relationship <- factor(contacts_unflat$fields$survey_behave_relationship)
parent_child_relationship <- forcats::fct_recode(parent_child_relationship,
Parent = "parent",
Grandparent = "grandparent",
`Aunt/Uncle`= "uncle",
`Foster Parent` = "foster",
Other = "other",
`Prefer Not to Say`  = "no")
df <- data.frame(enrolled, consent, program, parent_gender, child_gender, child_age_group, parent_child_relationship)
as.POSIXct(contacts_unflat$last_seen_on, format="%Y-%m-%dT%H:%M:%OS")
as.POSIXct(contacts_unflat$last_seen_on, format="%Y-%m-%dT%H:%M:%OS")[1]
contacts_unflat$last_seen_on[1]
head(sort(contacts_unflat$last_seen_on))
tail(sort(contacts_unflat$last_seen_on))
as.POSIXct(Sys.time(), tz = "UTC", format="%Y-%m-%dT%H:%M:%OS")
as.POSIXct(Sys.time(), tz = "UTC", format="%Y-%m-%dT%H:%M:%OS") - tail(as.POSIXct(contacts_unflat$last_seen_on, format="%Y-%m-%dT%H:%M:%OS")) <= 24
as.POSIXct(Sys.time(), tz = "UTC", format="%Y-%m-%dT%H:%M:%OS") - tail(as.POSIXct(contacts_unflat$last_seen_on, format="%Y-%m-%dT%H:%M:%OS"))
tail(as.POSIXct(contacts_unflat$last_seen_on, format="%Y-%m-%dT%H:%M:%OS"))
as.POSIXct(Sys.time(), tz = "UTC", format="%Y-%m-%dT%H:%M:%OS") - tail(sort(as.POSIXct(contacts_unflat$last_seen_on, format="%Y-%m-%dT%H:%M:%OS"))
as.POSIXct(Sys.time(), tz = "UTC", format="%Y-%m-%dT%H:%M:%OS") - tail(sort(as.POSIXct(contacts_unflat$last_seen_on, format="%Y-%m-%dT%H:%M:%OS")))
as.numeric(as.POSIXct(Sys.time(), tz = "UTC", format="%Y-%m-%dT%H:%M:%OS") - tail(sort(as.POSIXct(contacts_unflat$last_seen_on, format="%Y-%m-%dT%H:%M:%OS"))))
as.numeric(as.POSIXct(Sys.time(), tz = "UTC", format="%Y-%m-%dT%H:%M:%OS") - (sort(as.POSIXct(contacts_unflat$last_seen_on, format="%Y-%m-%dT%H:%M:%OS"))))
lubridate::now(tzone = "UTC")
as.POSIXct(lubridate::now(tzone = "UTC"), tz = "UTC", format="%Y-%m-%dT%H:%M:%OS") - as.POSIXct(contacts_unflat$last_seen_on, format="%Y-%m-%dT%H:%M:%OS")
lubridate::now(tzone = "UTC"), tz = "UTC", format="%Y-%m-%dT%H:%M:%OS")
as.POSIXct(lubridate::now(tzone = "UTC"), tz = "UTC", format="%Y-%m-%dT%H:%M:%OS")
min(as.POSIXct(lubridate::now(tzone = "UTC"), tz = "UTC", format="%Y-%m-%dT%H:%M:%OS") - as.POSIXct(contacts_unflat$last_seen_on, format="%Y-%m-%dT%H:%M:%OS"))
tail(sort(as.POSIXct(contacts_unflat$last_seen_on, format="%Y-%m-%dT%H:%M:%OS"))
tail(sort(as.POSIXct(contacts_unflat$last_seen_on, format="%Y-%m-%dT%H:%M:%OS")))
lubridate::now(tzone = "UTC") - tail(sort(as.POSIXct(contacts_unflat$last_seen_on, format="%Y-%m-%dT%H:%M:%OS")))
lubridate::now(tzone = "UTC")
tail(sort(as.POSIXct(contacts_unflat$last_seen_on, format="%Y-%m-%dT%H:%M:%OS", tz = "UTC")))
lubridate::now(tzone = "UTC") - tail(sort(as.POSIXct(contacts_unflat$last_seen_on, format="%Y-%m-%dT%H:%M:%OS", tz = "UTC")))
difftime(lubridate::now(tzone = "UTC"), tail(sort(as.POSIXct(contacts_unflat$last_seen_on, format="%Y-%m-%dT%H:%M:%OS", tz = "UTC"))))
difftime(lubridate::now(tzone = "UTC"), tail(sort(as.POSIXct(contacts_unflat$last_seen_on, format="%Y-%m-%dT%H:%M:%OS", tz = "UTC"))), units = "hours")
# Calculations -----------------------------------------------------------------
# active users # N = contacts for which the time difference between the current time and the datetime variable "last_seen_on" is less than 24 h
active_users_24hr <- difftime(lubridate::now(tzone = "UTC"), as.POSIXct(contacts_unflat$last_seen_on, format="%Y-%m-%dT%H:%M:%OS", tz = "UTC"), units = "hours") <= 24
active_users_24hr
runApp('Shiny - Table 7.R')
rsconnect::deployApp(appTitle = "ParentText Malaysia", appPrimaryDoc = "Shiny - Table 7.R")
rsconnect::deployApp(appTitle = "ParentText Malaysia", appPrimaryDoc = "Shiny - Table 7.R")
runApp('Shiny - Table 7.R')
key <- read.table("./tokens/PT_malaysia_key.txt", quote="\"", comment.char="")
set_rapidpro_key(key = key)
set_rapidpro_site(site = "https://app.rapidpro.io/api/v2/")
set_rapidpro_uuid_names()
contacts_unflat <- get_user_data(flatten = FALSE)
# Variables Manipulation -------------------------------------------------------
# get enrolled and consented data
enrolled <- NULL
consent <- NULL
program <- NULL
for (i in 1:length(contacts_unflat$groups)){
contact_name <- contacts_unflat$groups[[i]]
if (length(contact_name)==0) {
enrolled[i] <- NA
consent[i] <- NA
program[i] <- NA
} else{
enrolled[i] <- ifelse(any(contact_name$name %in% "joined"), "Yes", "No")
consent[i] <- ifelse(any(contact_name$name %in% "consent"), "Yes", "No")
program[i] <- ifelse(any(contact_name$name %in% "in program"), "Yes", "No")
}
}
parent_gender <- contacts_unflat$fields$gender
parent_gender <- factor(ifelse(parent_gender %in% c("female", "f", "woman", "Woman"), "Woman",
ifelse(parent_gender %in% c("male", "m", "man", "Man"), "Man",
ifelse(parent_gender %in% "no", NA, parent_gender))))
child_age_group <- contacts_unflat$fields$age_group_for_tips
know_age_group <- contacts_unflat$fields$know_age_group_for_tips
child_age_group <- ifelse(child_age_group == "child" & know_age_group == "no", "Default", child_age_group)
child_age_group <- factor(child_age_group)
child_age_group <- forcats::fct_recode(child_age_group,
Baby = "baby",
Child = "child",
Teen = "teen")
child_gender <- factor(contacts_unflat$fields$survey_behave_sex)
child_gender <-  forcats::fct_recode(child_gender,
Boy = "male",
Girl = "female",
`Prefer not to say` = "no")
parent_child_relationship <- factor(contacts_unflat$fields$survey_behave_relationship)
parent_child_relationship <- forcats::fct_recode(parent_child_relationship,
Parent = "parent",
Grandparent = "grandparent",
`Aunt/Uncle`= "uncle",
`Foster Parent` = "foster",
Other = "other",
`Prefer Not to Say`  = "no")
df <- data.frame(enrolled, consent, program, parent_gender, child_gender, child_age_group, parent_child_relationship)
as.POSIXct(contacts_unflat$last_seen_on, format="%Y-%m-%dT%H:%M:%OS", tz = "UTC")
tail(sort(as.POSIXct(contacts_unflat$last_seen_on, format="%Y-%m-%dT%H:%M:%OS", tz = "UTC")))
# Calculations -----------------------------------------------------------------
# active users # N = contacts for which the time difference between the current time and the datetime variable "last_seen_on" is less than 24 h
active_users_24hr <- difftime(lubridate::now(tzone = "UTC"), as.POSIXct(contacts_unflat$last_seen_on, format="%Y-%m-%dT%H:%M:%OS", tz = "UTC"), units = "hours") <= 24
active_users_24hr
sort(as.POSIXct(contacts_unflat$last_seen_on, format="%Y-%m-%dT%H:%M:%OS", tz = "UTC"))
difftime(lubridate::now(tzone = "UTC"), sort(as.POSIXct(contacts_unflat$last_seen_on, format="%Y-%m-%dT%H:%M:%OS", tz = "UTC")), units = "hours")
difftime(lubridate::now(tzone = "UTC"), sort(as.POSIXct(contacts_unflat$last_seen_on, format="%Y-%m-%dT%H:%M:%OS", tz = "UTC")), units = "days")
runApp('Shiny - Table 7.R')
# Calculations -----------------------------------------------------------------
# active users # N = contacts for which the time difference between the current time and the datetime variable "last_seen_on" is less than 24 h
active_users_24hr <- difftime(lubridate::now(tzone = "UTC"), as.POSIXct(contacts_unflat$last_seen_on, format="%Y-%m-%dT%H:%M:%OS", tz = "UTC"), units = "hours") <= 24
active_users_24hr <- factor(active_users_24hr)
active_users_24hr
if (length(levels(active_users_24hr)) == 1){
if (levels(active_users_24hr) == "FALSE"){
levels(active_users_24hr) <- c(levels(active_users_24hr),"TRUE")
} else if (levels(active_users_24hr) == "TRUE"){
levels(active_users_24hr) <- c(levels(active_users_24hr),"FALSE")
}
}
active_users_24hr <- forcats::fct_recode(active_users_24hr,
"No" = "FALSE",
"Yes" = "TRUE")
active_users_24hr
runApp('Shiny - Table 7.R')
?shiny::reactiveTimer
6 * 60 * 60 * 1000
