})
output$groups_behaviour <- renderUI({
df <- selected_data_date_from()
selectInput(
inputId = "grouper_behaviour",
label = "Group variable",
choices = c("Parent Gender" = "parent_gender",
"Child Gender" = "child_gender",
"Child Age Group" = "child_age_group"),
selected = "parent_gender"
)
})
output$groups_survey <- renderUI({
df <- selected_data_date_from()
selectInput(
inputId = "grouper_survey",
label = "Survey to View",
choices = c("Baseline" = "Baseline",
"Survey 2" = "2",
"Survey 3" = "3",
"Survey 4" = "4",
"Survey 5" = "5",
"Survey 6" = "6",
"Survey 7" = "7",
"Survey 8" = "8",
"Survey 9" = "9"),
selected = "Baseline"
)
})
observeEvent(input$groupby, {
if(input$groupby){
shinyjs::enable("grouper")
}else{
shinyjs::disable("grouper")
}
})
language_summary <- reactive({
summary_table(data = selected_data_date_from(), factors = language, include_margins = TRUE, replace = NULL)
})
language_summary_group <- reactive({
summary_table(data = selected_data_date_from(), factors = c(language), columns_to_summarise = (!!!rlang::syms(input$grouper)), include_margins = TRUE, wider_table = TRUE, replace = NULL, together = FALSE, naming_convention = TRUE)
})
output$plot_language <- renderPlotly({
ggplot(selected_data_date_from(), aes(x = language)) +
geom_histogram(stat = "count") +
viridis::scale_fill_viridis(discrete = TRUE, na.value = "navy") +
labs(x = "language", y = "Count") +
theme_classic()
})
output$plot_language_group <- renderPlotly({
req(input$grouper)
ggplot(selected_data_date_from(), aes(x = language, fill = (!!!rlang::syms(input$grouper)))) +
geom_histogram(stat = "count") +
viridis::scale_fill_viridis(discrete = TRUE, na.value = "navy") +
labs(x = "language", y = "Count") +
theme_classic()
})
output$last_online_plot <- renderPlotly({
ggplot(selected_data_date_from(), aes(x = last_online)) +
geom_point(stat="count") +
geom_line(stat = "count") +
labs(x = "Date Last Online", y = "Frequency") +
viridis::scale_colour_viridis(discrete = TRUE, na.value = "navy") +
theme_classic()
})
output$last_online_group_plot <- renderPlotly({
req(input$grouper_engagement)
ggplot(selected_data_date_from(), aes(x = last_online, colour = (!!!rlang::syms(input$grouper_engagement)))) +
geom_point(stat="count") +
geom_line(stat = "count") +
labs(x = "Date Last Online", y = "Frequency") +
viridis::scale_colour_viridis(discrete = TRUE, na.value = "navy") +
theme_classic()
})
output$plot_consent <- renderPlotly({
ggplot(selected_consented_data_date_from(), aes(x = consent)) +
geom_histogram(stat = "count") +
viridis::scale_fill_viridis(discrete = TRUE, na.value = "navy") +
labs(x = "Consent", y = "Count") +
theme_classic()
})
output$plot_consent_group <- renderPlotly({
req(input$grouper)
ggplot(selected_consented_data_date_from(), aes(x = consent, fill = (!!!rlang::syms(input$grouper)))) +
geom_histogram(stat = "count") +
viridis::scale_fill_viridis(discrete = TRUE, na.value = "navy") +
labs(x = "Consented", y = "Count") +
theme_classic()
})
output$parenting_goals_plot <- renderPlotly({
df_goals <- selected_data_date_from() %>% group_by(parenting_goal_wrap) %>% summarise(n = n())
fig <- plot_ly(df_goals, labels = ~parenting_goal_wrap, values = ~n, type = 'pie')
fig %>% layout(xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
})
output$recruitment_channel_plot <- renderPlotly({
df_recruitment <- selected_data_date_from() %>% group_by(recruitment_channel) %>% summarise(n = n())
fig <- plot_ly(df_recruitment, labels = ~recruitment_channel, values = ~n, type = 'pie')
fig %>% layout(xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
})
output$parenting_goals_group_plot <- renderPlotly({
req(input$grouper)
ggplot(selected_data_date_from(), aes(x = parenting_goal_wrap, fill = (!!!rlang::syms(input$grouper)))) +
geom_histogram(stat = "count") +
viridis::scale_fill_viridis(discrete = TRUE, na.value = "navy") +
labs(x = "Parenting goals", y = "Count") +
theme_classic()
})
output$recruitment_channel_group_plot <- renderPlotly({
req(input$grouper)
ggplot(selected_data_date_from(), aes(x = recruitment_channel, fill = (!!!rlang::syms(input$grouper)))) +
geom_histogram(stat = "count") +
viridis::scale_fill_viridis(discrete = TRUE, na.value = "navy") +
labs(x = "Recruitment channel", y = "Count") +
theme_classic()
})
consent_summary <- reactive({
summary_table(data = selected_consented_data_date_from(), factors = consent, include_margins = TRUE, replace = NULL)
})
consent_summary_group <- reactive({
req(input$grouper)
summary_table(selected_consented_data_date_from(), consent, (!!!rlang::syms(input$grouper)), include_margins = TRUE, wider_table = TRUE, replace = NULL, together = FALSE, naming_convention = TRUE)
})
parent_gender_summary <- reactive({
summary_table(data = selected_data_date_from(), factors = parent_gender, include_margins = TRUE, replace = NULL)
})
parent_gender_group_summary <- reactive({
summary_table(selected_data_date_from(), parent_gender, (!!!rlang::syms(input$grouper)), include_margins = TRUE, wider_table = TRUE, replace = NULL, together = FALSE, naming_convention = TRUE)
})
child_gender_summary <- reactive({
summary_table(data = selected_data_date_from(), factors = child_gender, include_margins = TRUE, replace = NULL)
})
child_gender_group_summary <- reactive({
req(input$grouper)
summary_table(selected_data_date_from(), child_gender, (!!!rlang::syms(input$grouper)), include_margins = TRUE, wider_table = TRUE, replace = NULL, together = FALSE, naming_convention = TRUE)
})
child_age_summary <- reactive({
summary_table(data = selected_data_date_from(), factors = child_age_group, include_margins = TRUE, replace = NULL)
})
child_age_group_summary <- reactive({
req(input$grouper)
summary_table(selected_data_date_from(), child_age_group, (!!!rlang::syms(input$grouper)), include_margins = TRUE, wider_table = TRUE, replace = NULL, together = FALSE, naming_convention = TRUE)
})
parent_child_relationship_summary <- reactive({
summary_table(data = selected_data_date_from(), factors = parent_child_relationship, include_margins = TRUE, replace = NULL)
})
parent_child_relationship_group_summary <- reactive({
req(input$grouper)
summary_table(selected_data_date_from(), parent_child_relationship, (!!!rlang::syms(input$grouper)), include_margins = TRUE, wider_table = TRUE, replace = NULL, together = FALSE, naming_convention = TRUE)
})
child_disabilities_summary <- reactive({
summary_table(data = selected_data_date_from(), factors = child_disabilities, include_margins = TRUE, replace = NULL)
})
child_disabilities_group_summary <- reactive({
req(input$grouper)
summary_table(selected_data_date_from(), child_disabilities, (!!!rlang::syms(input$grouper)), include_margins = TRUE, wider_table = TRUE, replace = NULL, together = FALSE, naming_convention = TRUE)
})
parent_relationship_summary <-  reactive({
summary_table(data = selected_data_date_from(), factors = parent_relationship, include_margins = TRUE, replace = NULL)
})
parent_relationship_group_summary <-  reactive({
summary_table(selected_data_date_from(), parent_relationship, (!!!rlang::syms(input$grouper)), include_margins = TRUE, wider_table = TRUE, replace = NULL, together = FALSE, naming_convention = TRUE)
})
active_users_group_summary <- reactive({
req(input$grouper_engagement)
summary_table(selected_data_date_from(), active_users, (!!!rlang::syms(input$grouper_engagement)), include_margins = TRUE, wider_table = TRUE, replace = NULL, together = FALSE, naming_convention = TRUE)
})
active_users_summary <- reactive({
summary_table(data = selected_data_date_from(), factors = active_users, include_margins = TRUE, replace = NULL)
})
active_users_7_days_summary <- reactive({
summary_table(data = selected_data_date_from(), factors = active_users_7_days, include_margins = TRUE, replace = NULL)
})
active_users_7_days_group_summary <- reactive({
req(input$grouper_engagement)
summary_table(selected_data_date_from(), active_users_7_days, (!!!rlang::syms(input$grouper_engagement)), include_margins = TRUE, wider_table = TRUE, replace = NULL, together = FALSE, naming_convention = TRUE)
})
comp_prog_summary <- reactive({
comp_prog_df <- selected_data_date_from() %>%
summarise(program_completion_mean = round(mean(comp_prog_overall, na.rm = TRUE), 2),
program_completion_sd = round(sd(comp_prog_overall, na.rm = TRUE), 2))
colnames(comp_prog_df) <- naming_conventions(colnames(comp_prog_df))
comp_prog_df
})
comp_prog_group_summary <- reactive({
req(input$grouper_engagement)
comp_prog_df <- selected_data_date_from() %>% group_by(!!!rlang::syms(input$grouper_engagement)) %>%
summarise(program_completion_mean = round(mean(comp_prog_overall, na.rm = TRUE), 2),
program_completion_sd = round(sd(comp_prog_overall, na.rm = TRUE), 2))
colnames(comp_prog_df) <- naming_conventions(colnames(comp_prog_df))
comp_prog_df
})
parent_age_summary <- reactive({
req(input$grouper)
parent_age_df <- selected_data_date_from() %>%
summarise(parent_age_mean = round(mean(parent_age, na.rm = TRUE), 2),
parent_age_sd = round(sd(parent_age, na.rm = TRUE), 2))
colnames(parent_age_df) <- naming_conventions(colnames(parent_age_df))
parent_age_df
})
parent_age_group_summary <- reactive({
req(input$grouper)
parent_age_df <- selected_data_date_from() %>% group_by(!!!rlang::syms(input$grouper)) %>%
summarise(parent_age_mean = round(mean(parent_age, na.rm = TRUE), 2),
parent_age_sd = round(sd(parent_age, na.rm = TRUE), 2))
colnames(parent_age_df) <- naming_conventions(colnames(parent_age_df))
parent_age_df
})
completed_welcome_summary <- reactive({
summary_table(data = selected_data_date_from(), factors = completed_welcome, include_margins = TRUE, replace = NULL)
})
completed_welcome_group_summary <- reactive({
req(input$grouper_engagement)
summary_table(selected_data_date_from(), completed_welcome, (!!!rlang::syms(input$grouper_engagement)), include_margins = TRUE, wider_table = TRUE, replace = NULL, together = FALSE, naming_convention = TRUE)
})
# Note: These are the *number* of people that have completed the survey
completed_survey_summary <- reactive({
df <- selected_data_date_from()
survey_completed <- NULL
survey_completed[[1]] <- df %>% summarise(n = sum(comp_survey_w1 == 1, na.rm = TRUE))
survey_completed[[1]]$perc <- survey_completed[[1]]$n/nrow(df) * 100
survey_completed[[1]]$Week <- "Week 1"
for (i in 2:9){
survey_completed[[i]] <- df %>% summarise(n = sum(comp_survey_w2 == i, na.rm = TRUE))
survey_completed[[i]]$perc <- survey_completed[[i]]$n/nrow(df) * 100
survey_completed[[i]]$Week <- paste("Week ", i, sep = "")
}
survey_completed <- plyr::ldply(survey_completed)
survey_completed <- survey_completed %>%
mutate("Completed survey (%)" := str_c(`n`, ' (', round(`perc`, 2), ")")) %>%
dplyr::select(-c(n, perc))
pivot_wider(survey_completed, names_from = Week, values_from = `Completed survey (%)`)
})
# Note: These are the *number* of people that have completed the survey
consented_survey_summary <- reactive({
df <- selected_data_date_from()
survey_completed <- NULL
wek1 <- summary_table(data = df, factors = consent_survey_w1, include_margins = TRUE, replace = NULL)
wek2 <- summary_table(data = df, factors = consent_survey_w2, include_margins = TRUE, replace = NULL)
wek3 <- summary_table(data = df, factors = consent_survey_w3, include_margins = TRUE, replace = NULL)
wek4 <- summary_table(data = df, factors = consent_survey_w4, include_margins = TRUE, replace = NULL)
names(wek1) <- c("Consented", "Baseline")
names(wek2) <- c("Consented", "Week 2")
names(wek3) <- c("Consented", "Week 3")
names(wek4) <- c("Consented", "Week 4")
left_join(left_join(left_join(wek1, wek2), wek3), wek4)
})
consented_survey_group_summary <- reactive({
req(input$grouper)
df <- selected_data_date_from()
survey_completed <- NULL
wek1 <- summary_table(data = df, factors = consent_survey_w1, (!!!rlang::syms(input$grouper)), include_margins = TRUE, wider_table = TRUE, replace = NULL, together = FALSE, naming_convention = TRUE)
wek2 <- summary_table(data = df, factors = consent_survey_w2, (!!!rlang::syms(input$grouper)), include_margins = TRUE, wider_table = TRUE, replace = NULL, together = FALSE, naming_convention = TRUE)
wek3 <- summary_table(data = df, factors = consent_survey_w3, (!!!rlang::syms(input$grouper)), include_margins = TRUE, wider_table = TRUE, replace = NULL, together = FALSE, naming_convention = TRUE)
wek4 <- summary_table(data = df, factors = consent_survey_w4, (!!!rlang::syms(input$grouper)), include_margins = TRUE, wider_table = TRUE, replace = NULL, together = FALSE, naming_convention = TRUE)
names(wek1)[c(1, 3)] <- c("Consented", "Baseline")
names(wek2)[c(1, 3)] <- c("Consented", "Week 2")
names(wek3)[c(1, 3)] <- c("Consented", "Week 3")
names(wek4)[c(1, 3)] <- c("Consented", "Week 4")
merge(merge(merge(wek1, wek2), wek3), wek4)
})
completed_survey_group_summary <- reactive({
req(input$grouper)
df <- selected_data_date_from()
survey_completed <- NULL
survey_completed[[1]] <- df %>%
group_by(!!!rlang::syms(input$grouper)) %>%
summarise(n = sum(comp_survey_w1 == 1, na.rm = TRUE))
survey_completed[[1]]$perc <- survey_completed[[1]]$n/nrow(df) * 100
survey_completed[[1]]$Week <- "Week 1"
for (i in 2:9){
survey_completed[[i]] <- df %>% group_by(!!!rlang::syms(input$grouper)) %>% summarise(n = sum(comp_survey_w2 == i, na.rm = TRUE))
survey_completed[[i]]$perc <- survey_completed[[i]]$n/nrow(df) * 100
survey_completed[[i]]$Week <- paste("Week ", i, sep = "")
}
survey_completed <- plyr::ldply(survey_completed)
survey_completed <- survey_completed %>%
mutate("Completed survey (%)" := str_c(`n`, ' (', round(`perc`, 2), ")")) %>%
dplyr::select(-c(n, perc))
pivot_wider(survey_completed, names_from = Week, values_from = `Completed survey (%)`)
})
# Survey stuff -----------------------------------------------------------------------
parenting_survey_summary <- reactive({
req(input$grouper_survey)
selected_survey_data_date_from() %>%
dplyr::filter(week == input$grouper_survey) %>%
group_by(week, Group) %>%
summarise(Mean = mean(vals, na.rm = TRUE), SD = sd(vals, na.rm = TRUE), `Number of responses` = sum(!is.na(vals))) %>%
mutate(Scale = ifelse(Group %in% c("Food insecurity", "Sexual abuse prevention"), "0-30", "0-7")) %>%
mutate(Mean = round(Mean, 2),
SD = round(SD, 2),
`Number of responses` = round(`Number of responses`, 0))
})
output$parenting_survey_plot <- renderPlotly({
parenting_survey1 <- selected_survey_data_date_from() %>% mutate(week = as.numeric(week)) %>% filter(Group %in% c("Positive parenting", "Child maltreatment", "Stress", "Child Behaviour"))
parenting_survey_plot <- summarySE(parenting_survey1, groups = c(week, Group), var = vals, na.rm = TRUE)
ggplot(parenting_survey_plot, aes(x=week, y=mean, colour=Group, group = Group), width = 2) +
geom_line() +
geom_point(data = parenting_survey_plot, aes(size = N)) +
geom_errorbar(aes(ymin=mean-se, ymax=mean+se), width=.1) +
viridis::scale_color_viridis(discrete = TRUE) +
labs(x = "Survey", y = "Frequency", title = "Survey Responses with (SE) Error Bars") +
scale_x_continuous(breaks = c(1,2,3,4,5,6,7,8,9),
labels=c("Baseline", "2", "3", "4", "5", "6", "7", "8", "9")) +
theme_classic()
})
output$behaviour_plots <- renderPlotly({
parenting_survey1 <- selected_survey_data_date_from() %>% filter(!is.na(vals))
parenting_survey_plot <- summarySE(parenting_survey1, groups = c(week), var = vals, na.rm = TRUE)
ggplot(parenting_survey_plot, aes(x=week, y=mean, group = week), width = 2) +
geom_line(colour = "black") +
geom_point(data = parenting_survey_plot, aes(size = N)) +
geom_errorbar(aes(ymin=mean-se, ymax=mean+se), width=.1) +
viridis::scale_color_viridis(discrete = TRUE) +
labs(x = "Survey", y = "Frequency", title = "Survey Responses with (SE) Error Bars") +
theme_classic()
})
output$behaviour_group_plots <- renderPlotly({
#req(input$grouper)
df_age_group <- selected_data_date_from() %>% dplyr::select(c(ID, child_age_group, parent_gender, child_gender))
parenting_survey1 <- merge(selected_survey_data_date_from(), df_age_group)
parenting_survey1 <- parenting_survey1 %>% filter(!is.na(vals))
parenting_survey_plot <- summarySE(parenting_survey1, groups = c(week, child_age_group), var = vals, na.rm = TRUE)
ggplot(parenting_survey_plot, aes(x=week, y=mean, colour = child_age_group, group = child_age_group), width = 2) +
geom_line() +
geom_point(data = parenting_survey_plot, aes(size = N)) +
geom_errorbar(aes(ymin=mean-se, ymax=mean+se), width=.1) +
viridis::scale_color_viridis(discrete = TRUE) +
labs(x = "Survey", y = "Frequency", title = "Survey Responses with (SE) Error Bars") +
theme_classic()
})
output$behaviour_baby_plot <- renderPlotly({
df_baby <- selected_data_date_from() %>% filter(child_age_group == "Baby")
ggplot(df_baby, aes(x = challenge_behav_wrap)) +
geom_histogram(stat = "count") +
viridis::scale_fill_viridis(discrete = TRUE, na.value = "navy") +
labs(x = NULL, y = NULL) +
facet_grid(cols = vars(child_age_group)) +
theme_classic()
})
output$behaviour_child_plot <- renderPlotly({
df_child <- selected_data_date_from() %>% filter(child_age_group == "Child")
ggplot(df_child, aes(x = challenge_behav_wrap)) +
geom_histogram(stat = "count") +
viridis::scale_fill_viridis(discrete = TRUE, na.value = "navy") +
labs(x = NULL, y = NULL) +
facet_grid(cols = vars(child_age_group)) +
theme_classic()
})
output$behaviour_teen_plot <- renderPlotly({
df_teen <- selected_data_date_from() %>% filter(child_age_group == "Teen")
ggplot(df_teen, aes(x = challenge_behav_wrap)) +
geom_histogram(stat = "count") +
viridis::scale_fill_viridis(discrete = TRUE, na.value = "navy") +
labs(x = NULL, y = NULL) +
facet_grid(cols = vars(child_age_group)) +
theme_classic()
})
output$behaviour_default_plot <- renderPlotly({
df_default <- selected_data_date_from() %>% filter(child_age_group == "Default")
ggplot(df_default, aes(x = challenge_behav_wrap)) +
geom_histogram(stat = "count") +
viridis::scale_fill_viridis(discrete = TRUE, na.value = "navy") +
labs(x = NULL, y = NULL) +
facet_grid(cols = vars(child_age_group)) +
theme_classic()
})
output$behaviour_baby_group_plot <- renderPlotly({
req(input$grouper_behaviour)
df_baby <- selected_data_date_from() %>% filter(child_age_group == "Baby")
ggplot(df_baby, aes(x = challenge_behav_wrap, fill = (!!!rlang::syms(input$grouper_behaviour)))) +
geom_histogram(stat = "count") +
viridis::scale_fill_viridis(discrete = TRUE, na.value = "navy") +
labs(x = NULL, y = NULL) +
facet_grid(cols = vars(child_age_group)) +
theme_classic()
})
output$behaviour_child_group_plot <- renderPlotly({
req(input$grouper_behaviour)
df_child <- selected_data_date_from() %>% filter(child_age_group == "Child")
ggplot(df_child, aes(x = challenge_behav_wrap, fill = (!!!rlang::syms(input$grouper_behaviour)))) +
geom_histogram(stat = "count") +
viridis::scale_fill_viridis(discrete = TRUE, na.value = "navy") +
labs(x = NULL, y = NULL) +
facet_grid(cols = vars(child_age_group)) +
theme_classic()
})
output$behaviour_teen_group_plot <- renderPlotly({
req(input$grouper_behaviour)
df_teen <- selected_data_date_from() %>% filter(child_age_group == "Teen")
ggplot(df_teen, aes(x = challenge_behav_wrap, fill = (!!!rlang::syms(input$grouper_behaviour)))) +
geom_histogram(stat = "count") +
viridis::scale_fill_viridis(discrete = TRUE, na.value = "navy") +
labs(x = NULL, y = NULL) +
facet_grid(cols = vars(child_age_group)) +
theme_classic()
})
output$behaviour_default_group_plot <- renderPlotly({
req(input$grouper_behaviour)
df_default <- selected_data_date_from() %>% filter(child_age_group == "Default")
ggplot(df_default, aes(x = challenge_behav_wrap, fill = (!!!rlang::syms(input$grouper_behaviour)))) +
geom_histogram(stat = "count") +
viridis::scale_fill_viridis(discrete = TRUE, na.value = "navy") +
labs(x = NULL, y = NULL) +
facet_grid(cols = vars(child_age_group)) +
theme_classic()
})
# Flow Tab ------------------------------------------------------------
selected_flow_data_date_from <- reactive({
valid_IDs <- selected_data_date_from()$ID
all_flows <- all_flows %>% filter(ID %in% c(valid_IDs))
all_flows_df <- flow_data_summary_function(all_flows, Flow) %>%
return(all_flows_df)
})
all_flows_response <- reactive({
selected_flow_data_date_from() %>%
#filter(!is.na(Flow)) %>%
pivot_wider(id_cols = interacted, names_from = Flow, values_from = `Count (%)`) %>%
dplyr::select(-c(`NA`))
})
output$plot_flow <- renderPlotly({
all_flows_df <- selected_flow_data_date_from() %>%
separate(`Count (%)`, into = "Count") %>%
mutate(Count = as.numeric(as.character(Count)))
ggplot(all_flows_df, aes(x = interacted, y = Count, fill = `Flow`)) +
geom_bar(stat = "identity") +
viridis::scale_fill_viridis(discrete = TRUE, na.value = "navy") +
theme_classic() +
labs(x = "Interacted")
})
# Output render ------------------------------------------------------------
output$myvaluebox1 <- shinydashboard::renderValueBox({
df_enrolled <- summary_table(data = selected_consented_data_date_from(), factors = enrolled, include_margins = TRUE, wider_table = TRUE, replace = NULL, together = FALSE, naming_convention = FALSE)
df_enrolled <- df_enrolled %>% mutate(group =  enrolled, count = n) %>% dplyr::select(c(group, count))
shinydashboard::valueBox(df_enrolled$count[1], subtitle = "Enrolled", icon = icon("user"),
color = "aqua"
)
})
output$myvaluebox2 <- shinydashboard::renderValueBox({
df_consented <- summary_table(data = selected_data_date_from(), factors = consent, include_margins = TRUE, wider_table = TRUE, replace = NULL, together = FALSE, naming_convention = FALSE)
df_consented <- df_consented %>% mutate(group = consent, count = n) %>% dplyr::select(c(group, count))
shinydashboard::valueBox(df_consented$count[1],subtitle = "Consented",icon = icon("check"),
color = "green"
)
})
output$myvaluebox3 <- shinydashboard::renderValueBox({
df_program <- summary_table(data = selected_data_date_from(), factors = program, include_margins = TRUE, wider_table = TRUE, replace = NULL, together = FALSE, naming_convention = FALSE)
df_program <- df_program %>% mutate(group =  program, count = n) %>% dplyr::select(c(group, count))
shinydashboard::valueBox(df_program$count[1],subtitle = "In Program",icon = icon("clipboard"),
color = "yellow"
)
})
output$myvaluebox4 <- shinydashboard::renderValueBox({
df_active_24 <-  summary_table(data = selected_data_date_from(), factors = active_users, include_margins = TRUE, wider_table = TRUE, replace = NULL, together = FALSE, naming_convention = FALSE)
df_active_24 <- (df_active_24 %>% filter(active_users == "Yes"))$n
shinydashboard::valueBox(df_active_24, subtitle = "Active in last 24 hours",icon = icon("clock"),
color = "purple")
})
output$myvaluebox5 <- shinydashboard::renderValueBox({
df_active_7d <- summary_table(data = selected_data_date_from(), factors = active_users_7_days, include_margins = TRUE, wider_table = TRUE, replace = NULL, together = FALSE, naming_convention = FALSE)
df_active_7d <- (df_active_7d %>% filter(active_users_7_days == "Yes"))$n
shinydashboard::valueBox(df_active_7d, subtitle = "Active in last 7 days", icon = icon("signal"),
color = "fuchsia"
)
})
#output$pp_table <- renderDataTable(pp_data_frame,
#                                   options = list(
#                                     pageLength = 5)
#)
output$language_summary <- shiny::renderTable({(language_summary())}, striped = TRUE)
output$language_summary_group <- shiny::renderTable({(language_summary_group())}, striped = TRUE)
output$consent_summary <- shiny::renderTable({(consent_summary())}, striped = TRUE)
output$consent_summary_group <- shiny::renderTable({(consent_summary_group())}, striped = TRUE)
output$parent_gender_summary <- shiny::renderTable({(parent_gender_summary())}, striped = TRUE)
output$parent_gender_group_summary <- shiny::renderTable({(parent_gender_group_summary())}, striped = TRUE)
output$parent_age_summary <- shiny::renderTable({(parent_age_summary())}, striped = TRUE)
output$parent_age_group_summary <- shiny::renderTable({(parent_age_group_summary())}, striped = TRUE)
output$child_gender_summary <- shiny::renderTable({(child_gender_summary())}, striped = TRUE)
output$child_gender_group_summary <- shiny::renderTable({(child_gender_group_summary())}, striped = TRUE)
output$child_age_summary <- shiny::renderTable({(child_age_summary())}, striped = TRUE)
output$child_age_group_summary <- shiny::renderTable({(child_age_group_summary())}, striped = TRUE)
output$parent_child_relationship_summary <- shiny::renderTable({(parent_child_relationship_summary())}, caption = "Relationship between the parent and child", striped = TRUE)
output$parent_child_relationship_group_summary <- shiny::renderTable({(parent_child_relationship_group_summary())}, caption = "Relationship between the parent and child", striped = TRUE)
output$parent_relationship_group_summary <- shiny::renderTable({(parent_relationship_group_summary())}, caption = "Relationship status of the parent", striped = TRUE)
output$parent_relationship_summary <- shiny::renderTable({(parent_relationship_summary())}, caption = "Relationship status of the parent", striped = TRUE)
output$child_disabilities_summary <- shiny::renderTable({(child_disabilities_summary())}, caption = "Does the child have a disability?", striped = TRUE)
output$child_disabilities_group_summary <- shiny::renderTable({(child_disabilities_group_summary())}, caption = "Does the child have a disability?", striped = TRUE)
output$active_users_summary <- shiny::renderTable({(active_users_summary())}, striped = TRUE)
output$active_users_group_summary <- shiny::renderTable({(active_users_group_summary())}, striped = TRUE)
output$active_users_7_days_summary <- shiny::renderTable({(active_users_7_days_summary())}, striped = TRUE)
output$active_users_7_days_group_summary <- shiny::renderTable({(active_users_7_days_group_summary())}, striped = TRUE)
output$comp_prog_summary <- shiny::renderTable({(comp_prog_summary())}, caption = "Number of skills in toolkit", striped = TRUE)
output$comp_prog_group_summary <- shiny::renderTable({(comp_prog_group_summary())}, caption = "Number of skills in toolkit", striped = TRUE)
output$completed_welcome_summary <- shiny::renderTable({completed_welcome_summary()}, striped = TRUE, caption = "Number (and percentage) of individuals who have completed the welcome survey")
output$completed_welcome_group_summary <- shiny::renderTable({{completed_welcome_group_summary()}}, striped = TRUE, caption = "Number (and percentage) of individuals who have completed the welcome survey")
output$completed_survey_summary <- shiny::renderTable({{completed_survey_summary()}}, striped = TRUE, caption = "Number (and percentage) of individuals who have completed different surveys")
output$completed_survey_group_summary <- shiny::renderTable({{completed_survey_group_summary()}}, striped = TRUE, caption = "Number (and percentage) of individuals who have completed different surveys")
output$consented_survey_summary <- shiny::renderTable({{consented_survey_summary()}}, striped = TRUE, caption = "Number (and percentage) of individuals who have consented to different surveys")
output$consented_survey_group_summary <- shiny::renderTable({{consented_survey_group_summary()}}, striped = TRUE, caption = "Number (and percentage) of individuals who have consented to different surveys")
output$all_flows_response <- shiny::renderTable({(all_flows_response())}, caption = "Count (%) for each flow", striped = TRUE)
output$parenting_survey_summary <- shiny::renderTable({(parenting_survey_summary())}, caption = "How many times in the past week ... \n For Sexual abuse prevention, the timeframe is how many days in the past month.", striped = TRUE)
}
# Create Shiny object
shinyApp(ui = ui, server = server)
}
# retention_exit ---------------------------------------------------------------
#parenttext_shiny(country = "Jamaica")
parenttext_shiny(country = "Malaysia")
# retention_exit ---------------------------------------------------------------
parenttext_shiny(country = "Jamaica")
parenttext_shiny(country = "Malaysia")
