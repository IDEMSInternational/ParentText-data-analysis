}
summary_table(df, child_gender, child_age_group, include_margins = TRUE, wider_table = TRUE, replace = NULL, together = FALSE, naming_convention = TRUE)
summary_table <- function(data = plhdata_org_clean, factors = Org, columns_to_summarise = NULL, summaries = c("frequencies", "mean"),
replace = "rp.contact.field.", include_margins = FALSE, wider_table = TRUE,
display_table = FALSE, naming_convention = TRUE, include_percentages = FALSE,
together = TRUE, drop = FALSE){
return(args(columns_to_summarise))
}
summary_table(df, child_gender, child_age_group, include_margins = TRUE, wider_table = TRUE, replace = NULL, together = FALSE, naming_convention = TRUE)
summary_table <- function(data = plhdata_org_clean, factors = Org, columns_to_summarise = NULL, summaries = c("frequencies", "mean"),
replace = "rp.contact.field.", include_margins = FALSE, wider_table = TRUE,
display_table = FALSE, naming_convention = TRUE, include_percentages = FALSE,
together = TRUE, drop = FALSE){
return(args(factors))
}
summary_table(df, child_gender, child_age_group, include_margins = TRUE, wider_table = TRUE, replace = NULL, together = FALSE, naming_convention = TRUE)
summary_table <- function(data = plhdata_org_clean, factors = Org, columns_to_summarise = NULL, summaries = c("frequencies", "mean"),
replace = "rp.contact.field.", include_margins = FALSE, wider_table = TRUE,
display_table = FALSE, naming_convention = TRUE, include_percentages = FALSE,
together = TRUE, drop = FALSE){
return(eval_tidy(quo(factors)))
}
summary_table(df, child_gender, child_age_group, include_margins = TRUE, wider_table = TRUE, replace = NULL, together = FALSE, naming_convention = TRUE)
summary_table <- function(data = plhdata_org_clean, factors = Org, columns_to_summarise = NULL, summaries = c("frequencies", "mean"),
replace = "rp.contact.field.", include_margins = FALSE, wider_table = TRUE,
display_table = FALSE, naming_convention = TRUE, include_percentages = FALSE,
together = TRUE, drop = FALSE){
return(rlang::eval_tidy(quo(factors)))
}
summary_table(df, child_gender, child_age_group, include_margins = TRUE, wider_table = TRUE, replace = NULL, together = FALSE, naming_convention = TRUE)
?eval_tidy
summary_table <- function(data = plhdata_org_clean, factors = Org, columns_to_summarise = NULL, summaries = c("frequencies", "mean"),
replace = "rp.contact.field.", include_margins = FALSE, wider_table = TRUE,
display_table = FALSE, naming_convention = TRUE, include_percentages = FALSE,
together = TRUE, drop = FALSE){
return(match.call(factors))
}
summary_table(df, child_gender, child_age_group, include_margins = TRUE, wider_table = TRUE, replace = NULL, together = FALSE, naming_convention = TRUE)
summary_table <- function(data = plhdata_org_clean, factors = Org, columns_to_summarise = NULL, summaries = c("frequencies", "mean"),
replace = "rp.contact.field.", include_margins = FALSE, wider_table = TRUE,
display_table = FALSE, naming_convention = TRUE, include_percentages = FALSE,
together = TRUE, drop = FALSE){
return(do.call(factors))
}
summary_table(df, child_gender, child_age_group, include_margins = TRUE, wider_table = TRUE, replace = NULL, together = FALSE, naming_convention = TRUE)
summary_table <- function(data = plhdata_org_clean, factors = Org, columns_to_summarise = NULL, summaries = c("frequencies", "mean"),
replace = "rp.contact.field.", include_margins = FALSE, wider_table = TRUE,
display_table = FALSE, naming_convention = TRUE, include_percentages = FALSE,
together = TRUE, drop = FALSE){
do.call(factors)
}
summary_table(df, child_gender, child_age_group, include_margins = TRUE, wider_table = TRUE, replace = NULL, together = FALSE, naming_convention = TRUE)
summary_table <- function(data = plhdata_org_clean, factors = Org, columns_to_summarise = NULL, summaries = c("frequencies", "mean"),
replace = "rp.contact.field.", include_margins = FALSE, wider_table = TRUE,
display_table = FALSE, naming_convention = TRUE, include_percentages = FALSE,
together = TRUE, drop = FALSE){
do.call(factors)
}
summary_table <- function(data = plhdata_org_clean, factors = Org, columns_to_summarise = NULL){
}
summary_table(df, child_gender, child_age_group, include_margins = TRUE, wider_table = TRUE, replace = NULL, together = FALSE, naming_convention = TRUE)
summary_table(df, child_gender, child_age_group)
summary_table <- function(data = plhdata_org_clean, factors = Org, columns_to_summarise = NULL){
print(factors)
print(columns_to_summarise)
}
summary_table(df, child_gender, child_age_group)
summary_table <- function(data = plhdata_org_clean, factors = Org, columns_to_summarise = NULL){
print(names(!!factors))
print(columns_to_summarise)
}
summary_table(df, child_gender, child_age_group)
summary_table <- function(data = plhdata_org_clean, factors = Org, columns_to_summarise = NULL){
print(colnames(!!factors))
print(columns_to_summarise)
}
summary_table(df, child_gender, child_age_group)
summary_table <- function(data = plhdata_org_clean, factors = Org, columns_to_summarise = NULL){
print(.data[[factors]])
print(columns_to_summarise)
}
summary_table(df, child_gender, child_age_group)
summary_table <- function(data = plhdata_org_clean, factors = Org, columns_to_summarise = NULL){
print(vars(.data[[factors]]))
print(columns_to_summarise)
}
summary_table(df, child_gender, child_age_group)
?vars
summary_table <- function(data = plhdata_org_clean, factors = Org, columns_to_summarise = NULL){
print(ggplot2::vars(.data[[factors]]))
print(columns_to_summarise)
}
summary_table(df, child_gender, child_age_group)
summary_table <- function(data = plhdata_org_clean, factors = Org, columns_to_summarise = NULL){
print(ggplot2::vars(factors))
print(columns_to_summarise)
}
summary_table(df, child_gender, child_age_group)
function getParamNames(func) {
var fnStr = func.toString().replace(STRIP_COMMENTS, '');
var result = fnStr.slice(fnStr.indexOf('(')+1, fnStr.indexOf(')')).match(ARGUMENT_NAMES);
if(result === null)
result = [];
return result;
}
summary_table <- function(data = plhdata_org_clean, factors = Org, columns_to_summarise = NULL){
print(deparse(quote(factors)))
}
summary_table(df, child_gender, child_age_group)
summary_table <- function(data = plhdata_org_clean, factors = Org, columns_to_summarise = NULL){
nm <-deparse(substitute(factors))
print(nm)
}
summary_table(df, child_gender, child_age_group)
summary_table <- function(data = plhdata_org_clean, factors = Org, columns_to_summarise = NULL){
nm <- deparse(substitute(columns_to_summarise))
print(nm)
}
summary_table(df, child_gender, c(child_age_group, child_age))
summary_table <- function(data = plhdata_org_clean, factors = Org, columns_to_summarise = NULL, summaries = c("frequencies", "mean"),
replace = "rp.contact.field.", include_margins = FALSE, wider_table = TRUE,
display_table = FALSE, naming_convention = TRUE, include_percentages = FALSE,
together = TRUE, drop = FALSE){
summaries <- match.arg(summaries)
return_table <- summary_calculation(data = data,
factors = c({{ factors }}),
columns_to_summarise = c({{ columns_to_summarise }}),
include_margins = include_margins,
summaries = summaries,
together = together,
drop = drop)
return_table_names <- naming_conventions(colnames(return_table), replace = replace)
if (summaries == "mean"){
if (naming_convention){
colnames(return_table) <- naming_conventions(colnames(return_table), replace = replace)
}
}
if (display_table){
if (summaries == "frequencies"){
return_table <- return_table %>% pivot_wider(id_cols = {{ factors }}, names_from =  {{ columns_to_summarise }}, values_from = n)
}
return_table <- gt(as_tibble(return_table)) %>%
tab_header(
title = paste(return_table_names[1], "by", return_table_names[2])  # fix up.
) %>%
tab_style(locations = list(cells_body(columns = 1)),
style = list(cell_borders(
sides = "right",
color = "black",
weight = px(2)),
cell_text(weight = "bold"))) %>%
tab_style(locations = list(cells_column_labels(columns = gt::everything())),
style = list(cell_borders(
sides = "bottom",
color = "black",
weight = px(2)),
cell_text(weight = "bold")))
#if (summaries == "mean"){
#  names(return_table$`_data`) <- naming_conventions(names(return_table$`_data`), replace = replace)
#}
} else {
if (summaries == "frequencies"){
if (wider_table && !missing(columns_to_summarise)){
print(deparse(substitute(factors)))
print(deparse(substitute(columns_to_summarise)))
print(deparse(substitute(factors)) %in% deparse(substitute(columns_to_summarise)))
#if (wider_table && !missing(columns_to_summarise) && (!factors %in% columns_to_summarise)){
if (together){
values_from <- "Count (%)"
} else {
values_from <- "n"
}
return_table <- return_table %>% pivot_wider(id_cols = {{ factors }}, names_from =  {{ columns_to_summarise }}, values_from = values_from, names_prefix = "")
print(return_table)
}
if (naming_convention){
colnames(return_table) <- naming_conventions(colnames(return_table), replace = replace)
}
}
}
return(return_table)
}
summary_table <- function(data = plhdata_org_clean, factors = Org, columns_to_summarise = NULL){
print(deparse(substitute(factors)))
print(deparse(substitute(columns_to_summarise)))
print(deparse(substitute(factors)) %in% deparse(substitute(columns_to_summarise)))
}
summary_table(df, child_gender, c(child_age_group, child_age))
deparse(substitute(columns_to_summarise))
summary_table <- function(data = plhdata_org_clean, factors = Org, columns_to_summarise = NULL){
print(deparse(substitute(factors)))
print(deparse(quote(columns_to_summarise)) )
print(deparse(substitute(factors)) %in% deparse(substitute(columns_to_summarise)))
}
summary_table(df, child_gender, c(child_age_group, child_age))
summary_table <- function(data = plhdata_org_clean, factors = Org, columns_to_summarise = NULL){
print(deparse(substitute(factors)))
print((substitute(columns_to_summarise)) )
print(deparse(substitute(factors)) %in% deparse(substitute(columns_to_summarise)))
}
summary_table(df, child_gender, c(child_age_group, child_age))
summary_table <- function(data = plhdata_org_clean, factors = Org, columns_to_summarise = NULL){
print(deparse(substitute(factors)))
print(deparse(substitute(columns_to_summarise)))
print(deparse(substitute(factors)) %in% deparse(substitute(columns_to_summarise)))
}
summary_table(df, child_gender, c(child_age_group, child_age))
summary_table <- function(data = plhdata_org_clean, factors = Org, columns_to_summarise = NULL){
print(deparse(substitute(factors)))
return(deparse(substitute(columns_to_summarise)))
print(deparse(substitute(factors)) %in% deparse(substitute(columns_to_summarise)))
}
summary_table(df, child_gender, c(child_age_group, child_age))
x <- summary_table(df, child_gender, c(child_age_group, child_age))
x
str_split(x, pattern = ",")
str_split(x, pattern = ", ")
x <- summary_table(df, child_gender, c(child_age_group,   child_age))
str_split(x, pattern = ", ")
str_split(str_split(x, pattern = ", "), "c(")
str_split(str_split(x, pattern = ", ", simplify = TRUE), "c(")
str_split(x, pattern = ", ", simplify = TRUE)
str_split(x, pattern = ", ", simplify = FALSE)
str_split(str_split(x, pattern = ", ", simplify = FALSE)[[1]], "c(")
str_split(x, pattern = ", ", simplify = FALSE)[[1]]
y <- str_split(x, pattern = ", ", simplify = FALSE)[[1]]
str_split(y, "c(")
y
y <- str_split(x, pattern = ", ", simplify = FALSE)[[1]]
str_split(y[1], "c(")
y[1]
gsub("^c\\(|\\)$", "", x)
x <- summary_table(df, child_gender, c(child_age_group,   child_age))
x <- gsub("^c\\(|\\)$", "", x)
x
y <- str_split(x, pattern = ", ", simplify = FALSE)[[1]]
y
summary_table <- function(data = plhdata_org_clean, factors = Org, columns_to_summarise = NULL){
print(deparse(substitute(factors)))
all_factors <- gsub("^c\\(|\\)$", "", deparse(substitute(factors)))
all_columns_to_summarise <- gsub("^c\\(|\\)$", "", deparse(substitute(columns_to_summarise)))
print(all_factors %in% all_columns_to_summarise)
}
summary_table(df, child_gender, c(child_age_group,   child_age))
summary_table <- function(data = plhdata_org_clean, factors = Org, columns_to_summarise = NULL){
print(deparse(substitute(factors)))
all_factors <- gsub("^c\\(|\\)$", "", deparse(substitute(factors)))
all_columns_to_summarise <- gsub("^c\\(|\\)$", "", deparse(substitute(columns_to_summarise)))
print(all_factors)
print(all_columns_to_summarise)
print(all_factors %in% all_columns_to_summarise)
}
summary_table(df, child_gender, c(child_age_group,   child_age))
summary_table <- function(data = plhdata_org_clean, factors = Org, columns_to_summarise = NULL){
all_factors <- gsub("^c\\(|\\)$", "", deparse(substitute(factors)))
all_columns_to_summarise <- str_split(gsub("^c\\(|\\)$", "", deparse(substitute(columns_to_summarise))), pattern = ", ")
print(all_factors)
print(all_columns_to_summarise)
print(all_factors %in% all_columns_to_summarise)
}
summary_table(df, child_gender, c(child_age_group,   child_age))
summary_table <- function(data = plhdata_org_clean, factors = Org, columns_to_summarise = NULL){
summary_table <- function(data = plhdata_org_clean, factors = Org, columns_to_summarise = NULL){
summary_table <- function(data = plhdata_org_clean, factors = Org, columns_to_summarise = NULL){
all_factors <- str_split(gsub("^c\\(|\\)$", "", deparse(substitute(factors))), pattern = ", ")
all_columns_to_summarise <- str_split(gsub("^c\\(|\\)$", "", deparse(substitute(columns_to_summarise))), pattern = ", ")
print(all_factors)
print(all_columns_to_summarise)
print(all_factors %in% all_columns_to_summarise)
}
summary_table(df, child_gender, c(child_age_group,   child_age))
summary_table <- function(data = plhdata_org_clean, factors = Org, columns_to_summarise = NULL){
all_factors <- str_split(gsub("^c\\(|\\)$", "", deparse(substitute(factors))), pattern = ", ")
all_columns_to_summarise <- str_split(gsub("^c\\(|\\)$", "", deparse(substitute(columns_to_summarise))), pattern = ", ")
print(all_factors)
print(all_columns_to_summarise)
print(any(all_factors) %in% all_columns_to_summarise)
}
summary_table(df, child_gender, c(child_age_group,   child_age))
summary_table <- function(data = plhdata_org_clean, factors = Org, columns_to_summarise = NULL){
all_factors <- str_split(gsub("^c\\(|\\)$", "", deparse(substitute(factors))), pattern = ", ")
all_columns_to_summarise <- str_split(gsub("^c\\(|\\)$", "", deparse(substitute(columns_to_summarise))), pattern = ", ")
print(all_factors)
print(all_columns_to_summarise)
print(any(all_factors[[1]]) %in% all_columns_to_summarise[[1]])
}
summary_table(df, child_gender, c(child_age_group,   child_age))
summary_table <- function(data = plhdata_org_clean, factors = Org, columns_to_summarise = NULL){
all_factors <- str_split(gsub("^c\\(|\\)$", "", deparse(substitute(factors))), pattern = ", ")
all_columns_to_summarise <- str_split(gsub("^c\\(|\\)$", "", deparse(substitute(columns_to_summarise))), pattern = ", ")
print(all_factors)
print(all_columns_to_summarise)
print(any(all_factors[[1]]) %in% all_columns_to_summarise[[1]])
}
summary_table <- function(data = plhdata_org_clean, factors = Org, columns_to_summarise = NULL){
all_factors <- str_split(gsub("^c\\(|\\)$", "", deparse(substitute(factors))), pattern = ", ")
all_columns_to_summarise <- str_split(gsub("^c\\(|\\)$", "", deparse(substitute(columns_to_summarise))), pattern = ", ")
return(all_factors)
print(all_columns_to_summarise)
print(any(all_factors[[1]]) %in% all_columns_to_summarise[[1]])
}
all_factors <- summary_table(df, child_gender, c(child_age_group,   child_age))
summary_table <- function(data = plhdata_org_clean, factors = Org, columns_to_summarise = NULL){
all_factors <- str_split(gsub("^c\\(|\\)$", "", deparse(substitute(factors))), pattern = ", ")
all_columns_to_summarise <- str_split(gsub("^c\\(|\\)$", "", deparse(substitute(columns_to_summarise))), pattern = ", ")
print(all_factors)
return(all_columns_to_summarise)
print(any(all_factors[[1]]) %in% all_columns_to_summarise[[1]])
}
all_columns_to_summarise <- summary_table(df, child_gender, c(child_age_group,   child_gender))
all_columns_to_summarise
print(any(all_factors[[1]]) %in% all_columns_to_summarise[[1]])
all_factors
all_factors[[1]]
all_columns_to_summarise[[1]]
any(all_factors[[1]])
?any
all_columns_to_summarise <- summary_table(df, child_gender, c(child_gender))
print(any(all_factors[[1]]) %in% all_columns_to_summarise[[1]])
all_factors[[1]]
print(any(all_factors[[1]]) %in% all_columns_to_summarise[[1]])
any(strsplit(as.character(all_columns_to_summarise), split = ',')[[1]] %in% all_factors)
any(strsplit(as.character(all_factors), split = ',')[[1]] %in% all_columns_to_summarise)
all_columns_to_summarise <- summary_table(df, child_gender, c(child_gender, child_age))
any(strsplit(as.character(all_factors), split = ',')[[1]] %in% all_columns_to_summarise)
strsplit(as.character(all_factors), split = ',')[[1]]
all_factors
all_columns_to_summarise
any(strsplit(as.character(all_factors), split = ',')[[1]] %in% strsplit(as.character(all_columns_to_summarise), split = ',')[[1]])
strsplit(as.character(all_factors), split = ',')[[1]]
strsplit(as.character(all_columns_to_summarise), split = ',')[[1]]
all_columns_to_summarise
any(strsplit(as.character(all_factors), split = ',')[[1]] %in% (all_columns_to_summarise)[[1]])
all_columns_to_summarise
any(all_factors[[1]] %in% (all_columns_to_summarise)[[1]])
summary_table <- function(data = plhdata_org_clean, factors = Org, columns_to_summarise = NULL){
all_factors <- str_split(gsub("^c\\(|\\)$", "", deparse(substitute(factors))), pattern = ", ")
all_columns_to_summarise <- str_split(gsub("^c\\(|\\)$", "", deparse(substitute(columns_to_summarise))), pattern = ", ")
print(all_factors)
return(all_columns_to_summarise)
print(any(all_factors[[1]] %in% (all_columns_to_summarise)[[1]]))
}
all_columns_to_summarise <- summary_table(df, child_gender, c(child_gender, child_age))
summary_table <- function(data = plhdata_org_clean, factors = Org, columns_to_summarise = NULL){
all_factors <- str_split(gsub("^c\\(|\\)$", "", deparse(substitute(factors))), pattern = ", ")
all_columns_to_summarise <- str_split(gsub("^c\\(|\\)$", "", deparse(substitute(columns_to_summarise))), pattern = ", ")
return(any(all_factors[[1]] %in% (all_columns_to_summarise)[[1]]))
}
all_columns_to_summarise <- summary_table(df, child_gender, c(child_gender, child_age))
summary_table <- function(data = plhdata_org_clean, factors = Org, columns_to_summarise = NULL){
all_factors <- str_split(gsub("^c\\(|\\)$", "", deparse(substitute(factors))), pattern = ", ")
all_columns_to_summarise <- str_split(gsub("^c\\(|\\)$", "", deparse(substitute(columns_to_summarise))), pattern = ", ")
print(any(all_factors[[1]] %in% (all_columns_to_summarise)[[1]]))
}
all_columns_to_summarise <- summary_table(df, child_gender, c(child_gender, child_age))
all_columns_to_summarise <- summary_table(df, child_gender, c(hild_h, child_age))
all_columns_to_summarise <- summary_table(df, child_gender, c(child_genderss, child_age))
all_columns_to_summarise <- summary_table(df, child_gender, c(child_gender, child_age))
all_columns_to_summarise <- summary_table(df, c(child_gender, age, hi), c(child_gender, child_age))
all_columns_to_summarise <- summary_table(df, c(child_gender, age, hi), c(child_age))
summary_table(df, child_gender, child_age_group, include_margins = TRUE, wider_table = TRUE, replace = NULL, together = FALSE, naming_convention = TRUE)
# same function used in parent text
summary_calculation <- function(data = plhdata_org_clean, factors, columns_to_summarise = NULL, summaries = c("frequencies", "mean"),
together = FALSE, include_margins = FALSE, drop = FALSE){
summaries <- match.arg(summaries)
if (summaries == "frequencies"){
summary_output <- data %>%
mutate(across(c({{ columns_to_summarise }}), ~ as.character(.x))) %>%
group_by(across(c({{ columns_to_summarise }}, {{ factors }})), .drop = drop) %>%
summarise(n = n(),
perc = n()/nrow(.) * 100)
if (include_margins){
cts_margin <- data %>%
group_by(across(c({{ columns_to_summarise }})), .drop = drop) %>%
summarise(n = n(),
perc = n()/nrow(.) * 100)
ftr_margin <- data %>%
group_by(across(c({{ factors }})), .drop = drop) %>%
summarise(n = n(),
perc = n()/nrow(.) * 100)
corner_margin <- data %>%
summarise(n = n(),
perc = n()/nrow(.) * 100)
summary_output <- bind_rows(summary_output, cts_margin, ftr_margin, corner_margin, .id = "id")
summary_output <- summary_output %>%
ungroup() %>%
mutate(across({{ factors }}, as.character)) %>%
mutate(across({{ factors }}, ~ifelse(id %in% c(2, 4), "Total", .x))) %>%
mutate(across({{ columns_to_summarise }}, ~ifelse(id %in% c(3, 4), "Total", .x)))
summary_output <- summary_output %>%
mutate(across({{ factors }}, ~fct_relevel(.x, "Total", after = Inf))) %>%
mutate(across({{ columns_to_summarise }}, ~fct_relevel(.x, "Total", after = Inf))) %>%
select(-c("id"))
}
if (together){
summary_output <- summary_output %>%
mutate("Count (%)" := str_c(`n`, ' (', round(`perc`, 2), ")")) %>%
dplyr::select(-c(n, perc))
}
} else {
summary_output <- data %>%
group_by(across({{ factors }}), .drop = drop) %>%
#mutate(across({{ columns_to_summarise }}, ~as.numeric(.))) %>%
summarise(across({{ columns_to_summarise }}, ~mean(.x, na.rm = TRUE)))
if (include_margins){
corner_margin <- data %>%
summarise(across(c({{ columns_to_summarise }}), ~mean(.x, na.rm  = TRUE)))
summary_output <- bind_rows(summary_output, corner_margin, .id = "id")
summary_output <- summary_output %>%
ungroup() %>%
mutate(across({{ factors }}, as.character)) %>%
mutate(across({{ factors }}, ~ifelse(id == 2, "Total", .x)))
summary_output <- summary_output %>%
mutate(across({{ factors }}, ~fct_relevel(.x, "Total", after = Inf))) %>%
select(-c("id"))
}
}
return(unique(summary_output))
}
summary_table(data = df, factors = child_gender, include_margins = TRUE, replace = NULL)
summary_table(df, child_gender, child_age_group, include_margins = TRUE, wider_table = TRUE, replace = NULL, together = FALSE, naming_convention = TRUE)
summary_table <- function(data = plhdata_org_clean, factors = Org, columns_to_summarise = NULL, summaries = c("frequencies", "mean"),
replace = "rp.contact.field.", include_margins = FALSE, wider_table = TRUE,
display_table = FALSE, naming_convention = TRUE, include_percentages = FALSE,
together = TRUE, drop = FALSE){
summaries <- match.arg(summaries)
return_table <- summary_calculation(data = data,
factors = c({{ factors }}),
columns_to_summarise = c({{ columns_to_summarise }}),
include_margins = include_margins,
summaries = summaries,
together = together,
drop = drop)
return_table_names <- naming_conventions(colnames(return_table), replace = replace)
if (summaries == "mean"){
if (naming_convention){
colnames(return_table) <- naming_conventions(colnames(return_table), replace = replace)
}
}
if (display_table){
if (summaries == "frequencies"){
return_table <- return_table %>% pivot_wider(id_cols = {{ factors }}, names_from =  {{ columns_to_summarise }}, values_from = n)
}
return_table <- gt(as_tibble(return_table)) %>%
tab_header(
title = paste(return_table_names[1], "by", return_table_names[2])  # fix up.
) %>%
tab_style(locations = list(cells_body(columns = 1)),
style = list(cell_borders(
sides = "right",
color = "black",
weight = px(2)),
cell_text(weight = "bold"))) %>%
tab_style(locations = list(cells_column_labels(columns = gt::everything())),
style = list(cell_borders(
sides = "bottom",
color = "black",
weight = px(2)),
cell_text(weight = "bold")))
#if (summaries == "mean"){
#  names(return_table$`_data`) <- naming_conventions(names(return_table$`_data`), replace = replace)
#}
} else {
if (summaries == "frequencies"){
all_factors <- str_split(gsub("^c\\(|\\)$", "", deparse(substitute(factors))), pattern = ", ")
all_columns_to_summarise <- str_split(gsub("^c\\(|\\)$", "", deparse(substitute(columns_to_summarise))), pattern = ", ")
if (wider_table && !missing(columns_to_summarise) && (any(all_factors[[1]] %in% (all_columns_to_summarise)[[1]]) == FALSE)){
if (together){
values_from <- "Count (%)"
} else {
values_from <- "n"
}
return_table <- return_table %>% pivot_wider(id_cols = {{ factors }}, names_from =  {{ columns_to_summarise }}, values_from = values_from, names_prefix = "")
print(return_table)
}
if (naming_convention){
colnames(return_table) <- naming_conventions(colnames(return_table), replace = replace)
}
}
}
return(return_table)
}
summary_table(data = df, factors = child_gender, include_margins = TRUE, replace = NULL)
summary_table(df, child_gender, child_age_group, include_margins = TRUE, wider_table = TRUE, replace = NULL, together = FALSE, naming_convention = TRUE)
summary_table(df, child_gender, child_gender, include_margins = TRUE, wider_table = TRUE, replace = NULL, together = FALSE, naming_convention = TRUE)
country <- "Malaysia" # Jamaica, Philippines, South_Africa
source("Functions.R")
source(paste0(country, "_dashboard_settings.R"))
source("R Shiny Template.R")
source("Data Cleaning.R")
parenttext_shiny(country = country, date_from = default_date_from, date_to = default_date_to, include_archived_data = include_archived_data)
country <- "Malaysia" # Jamaica, Philippines, South_Africa
source("Functions.R")
source(paste0(country, "_dashboard_settings.R"))
source("R Shiny Template.R")
source("Data Cleaning.R")
parenttext_shiny(country = country, date_from = default_date_from, date_to = default_date_to, include_archived_data = include_archived_data)
source("R Shiny Template.R")
source("Data Cleaning.R")
country <- "Malaysia" # Jamaica, Philippines, South_Africa
source("Functions.R")
source(paste0(country, "_dashboard_settings.R"))
source("R Shiny Template.R")
source("Data Cleaning.R")
parenttext_shiny(country = country, date_from = default_date_from, date_to = default_date_to, include_archived_data = include_archived_data)
parenttext_shiny(country = country, date_from = default_date_from, date_to = default_date_to, include_archived_data = include_archived_data)
country <- "Malaysia" # Jamaica, Philippines, South_Africa
source("Functions.R")
source(paste0(country, "_dashboard_settings.R"))
source("R Shiny Template.R")
source("Data Cleaning.R")
parenttext_shiny(country = country, date_from = default_date_from, date_to = default_date_to, include_archived_data = include_archived_data)
