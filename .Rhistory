mmtable2::header_left_top(variable='summary-variable'))
last_table
# Code generated by the dialog, Frequency/Summary Tables
summary_table <- data_book$summary_table(data_name="Sheet1", columns_to_summarise=c("field","size"),
treat_columns_as_factor=TRUE, summaries=c("summary_mean"))
# Code generated by the dialog, Frequency/Summary Tables
summary_table <- data_book$summary_table(data_name="Sheet1", columns_to_summarise=c("field","size"),
treat_columns_as_factor=FALSE, summaries=c("summary_mean"))
last_table <- (mmtable2::mmtable(data=summary_table, cells=value) +
mmtable2::header_top_left(variable='variable') +
mmtable2::header_top_left(variable='summary'))
summary_table
# Code generated by the dialog, Frequency/Summary Tables
summary_table <- data_book$summary_table(data_name="Sheet1", factor = "village", columns_to_summarise=c("field","size"),
treat_columns_as_factor=FALSE, summaries=c("summary_mean"))
summary_table
last_table <- (mmtable2::mmtable(data=summary_table, cells=value) +
mmtable2::header_left_top(variable='summary-variable'))
last_table
last_table <- (mmtable2::mmtable(data=summary_table, cells=value) +
mmtable2::header_left_top(variable='summary-variable') +
mmtable2::header_top_left(variable = "village"))
last_table
# Code generated by the dialog, Frequency/Summary Tables
summary_table <- data_book$summary_table(data_name="Sheet1", factor = "village", columns_to_summarise=c("field","size"),
treat_columns_as_factor=FALSE, summaries=c("summary_mean"))
summary_table
# Code generated by the dialog, Frequency/Summary Tables
summary_table <- data_book$summary_table(data_name="Sheet1", columns_to_summarise=c("field","size"),
treat_columns_as_factors=TRUE, summaries=c("summary_mean"))
summary_table
# Code generated by the dialog, Frequency/Summary Tables
summary_table <- data_book$summary_table(data_name="Sheet1", columns_to_summarise=c("field","size"),
treat_columns_as_factors=TRUE, summaries=c("summary_mean"))
data_book$summary_table(data_name="Sheet1", columns_to_summarise=c("field","size"),
treat_columns_as_factors=TRUE, summaries=c("summary_mean"))
View(data_book$summary_table)
# Code generated by the dialog, Frequency/Summary Tables
summary_table <- data_book$summary_table(data_name="Sheet1", columns_to_summarise=c("field","size"),
treat_columns_as_factor=TRUE, summaries=c("summary_mean"))
last_table <- (mmtable2::mmtable(data=summary_table, cells=value) +
mmtable2::header_left_top(variable='summary-variable'))
summary_table
data_book$summary_table(data_name="Sheet1", columns_to_summarise=c("field","size"),
treat_columns_as_factor=TRUE, summaries=c("summary_mean"))
# Code generated by the dialog, Frequency/Summary Tables
data_book$summary_table(data_name="Sheet1", columns_to_summarise=c("field","size"),
treat_columns_as_factor=FALSE, summaries=c("summary_mean"))
# Code generated by the dialog, Frequency/Summary Tables
summary_table <- data_book$summary_table(data_name="Sheet1", columns_to_summarise=c("size","fert"),
treat_columns_as_factor=TRUE, summaries=c("summary_mean"))
summary_table
# Code generated by the dialog, Frequency/Summary Tables
summary_table <- data_book$summary_table(data_name="Sheet1", columns_to_summarise=c("size","fert"),
treat_columns_as_factor=TRUE, summaries=c("summary_mean"))
last_table <- (mmtable2::mmtable(data=summary_table, cells=value) +
mmtable2::header_top_left(variable='variable') + mmtable2::header_top_left(variable='summary') +
mmtable2::header_left_top(variable='variable') + mmtable2::header_top_left(variable='summary'))
data_book$add_object(data_name="Sheet1", object_name="last_table", object_type_label="table", object_format="html", object=last_table)
data_book$get_object_data(data_name="Sheet1", object_name="last_table", as_file=TRUE)
last_table <- (mmtable2::mmtable(data=summary_table, cells=value) +
mmtable2::header_top_left(variable='variable') + mmtable2::header_top_left(variable='summary'))
last_table
data_book$add_object(data_name="Sheet1", object_name="last_table", object_type_label="table", object_format="html", object=last_table)
data_book$get_object_data(data_name="Sheet1", object_name="last_table", as_file=TRUE)
last_table <- data_book$get_object_data(data_name="Sheet1", object_name="last_table", as_file=FALSE)
last_table <- last_table %>% gt::tab_header(title="hi") %>% gt::tab_style(style=gt::cell_text(font="NULL", size=gt::px(18)), location=gt::cells_title(groups="title"))
last_table
last_table <- last_table %>% gt::tab_header(title=NULL) %>% gt::tab_style(style=gt::cell_text(font="NULL", size=gt::px(18)), location=gt::cells_title(groups="title"))
last_table
last_table <- (mmtable2::mmtable(data=summary_table, cells=value) +
mmtable2::header_top_left(variable='variable') + mmtable2::header_top_left(variable='summary'))
data_book$add_object(data_name="Sheet1", object_name="last_table", object_type_label="table", object_format="html", object=last_table)
data_book$get_object_data(data_name="Sheet1", object_name="last_table", as_file=TRUE)
last_table <- data_book$get_object_data(data_name="Sheet1", object_name="last_table", as_file=FALSE)
last_table <- last_table %>% gt::tab_header(title="hi") %>% gt::tab_style(style=gt::cell_text(font="NULL", size=gt::px(18)), location=gt::cells_title(groups="title"))
summary_table <- data_book$summary_table(data_name="Sheet1", columns_to_summarise=c("size","fert"),
treat_columns_as_factor=TRUE, summaries=c("summary_mean"))
last_table <- (mmtable2::mmtable(data=summary_table, cells=value) +
mmtable2::header_top_left(variable='variable') + mmtable2::header_top_left(variable='summary'))
last_table
last_table <- last_table %>% gt::tab_header(title="hi") %>% gt::tab_style(style=gt::cell_text(font="NULL", size=gt::px(18)), location=gt::cells_title(groups="title"))
last_table
last_table_no_title <- last_table_title %>% gt::tab_header(title=NULL) %>% gt::tab_style(style=gt::cell_text(font="NULL", size=gt::px(18)), location=gt::cells_title(groups="title"))
last_table <- (mmtable2::mmtable(data=summary_table, cells=value) +
mmtable2::header_top_left(variable='variable') + mmtable2::header_top_left(variable='summary'))
last_table
last_table_title <- last_table %>% gt::tab_header(title="hi") %>% gt::tab_style(style=gt::cell_text(font="NULL", size=gt::px(18)), location=gt::cells_title(groups="title"))
last_table_title
last_table_no_title <- last_table_title %>% gt::tab_header(title=NULL) %>% gt::tab_style(style=gt::cell_text(font="NULL", size=gt::px(18)), location=gt::cells_title(groups="title"))
last_table
last_table_no_title
last_table_title
last_table <- last_table %>% gt::tab_footnote(footnote="title_foot", locations=gt::cells_title(groups="title")) %>% gt::tab_header(title="hi", subtitle="subtitle") %>% gt::tab_style(style=gt::cell_text(font="NULL", size=gt::px(18)), location=gt::cells_title(groups="title"))
last_table <- (mmtable2::mmtable(data=summary_table, cells=value) +
mmtable2::header_top_left(variable='variable') + mmtable2::header_top_left(variable='summary'))
last_table1 <- last_table %>%
gt::tab_footnote(footnote="title_foot", locations=gt::cells_title(groups="title")) %>%
gt::tab_header(title="hi", subtitle="subtitle") %>%
gt::tab_style(style=gt::cell_text(font="NULL", size=gt::px(18)), location=gt::cells_title(groups="title"))
last_table1
last_table1
last_table1 %>%
gt::tab_footnote(footnote=NULL, locations=gt::cells_title(groups="title"))
last_table1 %>%
gt::tab_footnote(footnote=NULL, locations=gt::cells_title(groups=NULL))
last_table1 %>%
#gt::tab_footnote(footnote="title_foot", locations=gt::cells_title(groups="title"))
gt::tab_header(title=NULL, subtitle=NULL)
last_table %>%
gt::tab_footnote(footnote="title_foot", locations=gt::cells_title(groups="title")) %>%
gt::tab_header(title="hi", subtitle="subtitle")
last_table1 <- last_table %>%
#gt::tab_footnote(footnote="title_foot", locations=gt::cells_title(groups="title")) %>%
gt::tab_header(title="hi", subtitle="subtitle") %>%
gt::tab_style(style=gt::cell_text(font="NULL", size=gt::px(18)), location=gt::cells_title(groups="title"))
last_table1
last_table1 %>%
#gt::tab_footnote(footnote="title_foot", locations=gt::cells_title(groups="title"))
gt::tab_header(title=NULL, subtitle=NULL)
library(gtsummary)
install.packages("gtsummary")
l
?actionButton
if (interactive()) {
ui <- fluidPage(
sliderInput("obs", "Number of observations", 0, 1000, 500),
actionButton("goButton", "Go!", class = "btn-success"),
plotOutput("distPlot")
)
server <- function(input, output) {
output$distPlot <- renderPlot({
# Take a dependency on input$goButton. This will run once initially,
# because the value changes from NULL to 0.
input$goButton
# Use isolate() to avoid dependency on input$obs
dist <- isolate(rnorm(input$obs))
hist(dist)
})
}
shinyApp(ui, server)
}
library(shiny)
library(shinydashboard)
library(tidyverse)
library(rjson)
library(readxl)
library(rapidpror)
if (interactive()) {
ui <- fluidPage(
sliderInput("obs", "Number of observations", 0, 1000, 500),
actionButton("goButton", "Go!", class = "btn-success"),
plotOutput("distPlot")
)
server <- function(input, output) {
output$distPlot <- renderPlot({
# Take a dependency on input$goButton. This will run once initially,
# because the value changes from NULL to 0.
input$goButton
# Use isolate() to avoid dependency on input$obs
dist <- isolate(rnorm(input$obs))
hist(dist)
})
}
shinyApp(ui, server)
}
library(shiny)
library(shinydashboard)
library(tidyverse)
library(rjson)
library(readxl)
library(rapidpror)
country <- "Jamaica" # Jamaica, Philippines, South Africa, Malaysia
type <- "KPI"
source("Functions.R")
source(paste0(country, "_dashboard_settings.R"))
if (type == "KPI"){
source("kpi_update.R")
source("kpi_shiny.R")
kpi_shiny()
} else {
source("R Shiny Template.R")
source("Data Cleaning.R")
parenttext_shiny(country = country, date_from = default_date_from, date_to = default_date_to, include_archived_data = include_archived_data)
}
setwd("~/GitHub/ParentText-data-analysis/R Code")
library(shiny)
library(shinydashboard)
library(tidyverse)
library(rjson)
library(readxl)
library(rapidpror)
country <- "Jamaica" # Jamaica, Philippines, South Africa, Malaysia
type <- "KPI"
source("Functions.R")
source(paste0(country, "_dashboard_settings.R"))
if (type == "KPI"){
source("kpi_update.R")
source("kpi_shiny.R")
kpi_shiny()
} else {
source("R Shiny Template.R")
source("Data Cleaning.R")
parenttext_shiny(country = country, date_from = default_date_from, date_to = default_date_to, include_archived_data = include_archived_data)
}
ui <- fluidPage(titlePanel('File download'),
sidebarLayout(
sidebarPanel(
dateRangeInput(
inputId = "date.range",
label   = "Select Date Range",
start   = Sys.Date() - 2,
end     = Sys.Date() - 1
),
actionButton(inputId   = "runReport",
label     = "Run Report")
),
mainPanel(verbatimTextOutput("date.text"))
))
server <- function(input, output, session) {
dates <- eventReactive(input$runReport, {
input$date.range
})
output$date.text <- renderPrint({
paste0(as.character(dates()[1]), " to ", as.character(dates()[2]))
})
}
shinyApp(ui, server)
shinyApp(ui, server)
library(shiny)
library(shinydashboard)
library(tidyverse)
library(rjson)
library(readxl)
library(rapidpror)
country <- "Jamaica" # Jamaica, Philippines, South Africa, Malaysia
type <- "KPI"
source("Functions.R")
source(paste0(country, "_dashboard_settings.R"))
if (type == "KPI"){
source("kpi_update.R")
source("kpi_shiny.R")
kpi_shiny()
} else {
source("R Shiny Template.R")
source("Data Cleaning.R")
parenttext_shiny(country = country, date_from = default_date_from, date_to = default_date_to, include_archived_data = include_archived_data)
}
kpi_shiny <- function(date_from = "2020-01-01"){
ui <- fluidPage(
dashboardPage(
header = dashboardHeader(title = "Download KPI Data"),
skin = "blue",
sidebar = dashboardSidebar(),
# Main panel for displaying outputs ----
dashboardBody(
shinydashboard::valueBoxOutput("myvaluebox1"),
shinydashboard::valueBoxOutput("myvaluebox2"),
shinydashboard::valueBoxOutput("myvaluebox3"),
column(6, align = "center",
box( width=NULL,
collapsible = FALSE,
solidHeader = TRUE,
splitLayout(textInput(inputId = "datefrom_text", label = "Date from:", value = date_from),
actionButton("goButton", "Go!", class = "btn-success"),
cellArgs = list(style = "vertical-align: top"),
cellWidths = c("80%", "20%")))),
fluidRow(
box(width = 6,
# Input: Choose dataset ----
selectInput("dataset", "Choose a dataset:",
choices = c("Ticket data",  "Counsellor data", "Overall summaries",
"Parish summaries", "Gender summaries")),
# Button
downloadButton("downloadData", "Download"))),
fluidRow(box(width = 12,
dataTableOutput("table")))
)
)
)
server <- function(input, output) {
updated_data <- update_data()
ticket_data <- updated_data[[1]]
user_data <- updated_data[[2]]
ticket_data_date_from <- eventReactive(input$goButton{
ticket_data_new <- ticket_data %>%
filter(opened_on >= as.Date(input$datefrom_text))
return(ticket_data_new)
})
assignee_data_date_from <- reactive({
status_by_assignee <- summary_table(data = ticket_data_date_from(), factors = counsellor, columns_to_summarise = c("status"))
time_by_assignee <- summary_table(data = ticket_data_date_from(),
factors = counsellor,
columns_to_summarise = "time_to_close",
summaries = "mean",
include_margins = FALSE)
assignee_data <- full_join(status_by_assignee, time_by_assignee)
assignee_data <- assignee_data %>%
mutate(`Time to close mean (hrs)` = as.numeric(`Time to close mean`)) %>%
mutate(`Time to close min (hrs)` = ifelse(`Time to close min` == "Inf", NA, `Time to close min`)) %>%
mutate(`Time to close max (hrs)` = ifelse(`Time to close max` == "-Inf", NA, `Time to close max`)) %>%
dplyr::select(-c(`Time to close mean`, `Time to close min`, `Time to close max`))
return(assignee_data)
})
ticket_user_data_date_from <- reactive({
ticket_user_data <- user_data %>% filter(uuid %in% ticket_data_date_from()$uuid)
return(ticket_user_data)
})
# TODO: we need to calculate these summaries
summaries_overall <- reactive({
# Summaries overall --------
open_overall <- ticket_data_date_from() %>% filter(status == "open") %>% summarise(`Opened` = n())
closed_overall <- ticket_data_date_from() %>% filter(status == "closed") %>% summarise(`Closed` = n())
time_overall <- ticket_data_date_from() %>% summarise(`Time to close (mean)` = mean(time_to_close, na.rm = TRUE),
`Time to close (min)` = min(time_to_close, na.rm = TRUE),
`Time to close (max)` = max(time_to_close, na.rm = TRUE))
summaries_overall <- cbind(open_overall, closed_overall, time_overall)
return(summaries_overall)
})
t_u_gender <- reactive({
summary_table(ticket_user_data_date_from(),
factors = gender)
})
t_u_parish <- reactive({
summary_table(ticket_user_data_date_from(),
factors = parish)
})
# Reactive value for selected dataset ----
datasetInput <- reactive({
switch(input$dataset,
"Ticket data" = ticket_data_date_from(),
"Counsellor data" = assignee_data_date_from(),
"Overall summaries" = summaries_overall(),
"Gender summaries" = t_u_gender(),
"Parish summaries" = t_u_parish())
})
# Table of selected dataset ----
output$table <- renderDataTable({
datasetInput()
})
# Downloadable csv of selected dataset ----
output$downloadData <- downloadHandler(
filename = function() {
paste(input$dataset, ".csv", sep = "")
},
content = function(file) {
write.csv(datasetInput(), file, row.names = FALSE)
}
)
output$myvaluebox1 <- shinydashboard::renderValueBox({
n_open <- nrow(ticket_data_date_from() %>% filter(status == "open"))
shinydashboard::valueBox(n_open, subtitle = "open", icon = icon("sun"),
color = "aqua"
)
})
output$myvaluebox2 <- shinydashboard::renderValueBox({
n_closed <- nrow(ticket_data_date_from() %>% filter(status == "closed"))
shinydashboard::valueBox(n_closed, subtitle = "closed",icon = icon("check"),
color = "green"
)
})
output$myvaluebox3 <- shinydashboard::renderValueBox({
mean_ttc <- round(as.numeric(mean(ticket_data_date_from()$time_to_close, na.rm = TRUE)), 1)
shinydashboard::valueBox(mean_ttc, subtitle = "average hours to close", icon = icon("clock"),
color = "yellow"
)
})
}
shiny::shinyApp(ui = ui, server = server)
}
kpi_shiny <- function(date_from = "2020-01-01"){
ui <- fluidPage(
dashboardPage(
header = dashboardHeader(title = "Download KPI Data"),
skin = "blue",
sidebar = dashboardSidebar(),
# Main panel for displaying outputs ----
dashboardBody(
shinydashboard::valueBoxOutput("myvaluebox1"),
shinydashboard::valueBoxOutput("myvaluebox2"),
shinydashboard::valueBoxOutput("myvaluebox3"),
column(6, align = "center",
box( width=NULL,
collapsible = FALSE,
solidHeader = TRUE,
splitLayout(textInput(inputId = "datefrom_text", label = "Date from:", value = date_from),
actionButton("goButton", "Go!", class = "btn-success"),
cellArgs = list(style = "vertical-align: top"),
cellWidths = c("80%", "20%")))),
fluidRow(
box(width = 6,
# Input: Choose dataset ----
selectInput("dataset", "Choose a dataset:",
choices = c("Ticket data",  "Counsellor data", "Overall summaries",
"Parish summaries", "Gender summaries")),
# Button
downloadButton("downloadData", "Download"))),
fluidRow(box(width = 12,
dataTableOutput("table")))
)
)
)
server <- function(input, output) {
updated_data <- update_data()
ticket_data <- updated_data[[1]]
user_data <- updated_data[[2]]
ticket_data_date_from <- eventReactive(input$goButton, {
ticket_data_new <- ticket_data %>%
filter(opened_on >= as.Date(input$datefrom_text))
return(ticket_data_new)
})
assignee_data_date_from <- reactive({
status_by_assignee <- summary_table(data = ticket_data_date_from(), factors = counsellor, columns_to_summarise = c("status"))
time_by_assignee <- summary_table(data = ticket_data_date_from(),
factors = counsellor,
columns_to_summarise = "time_to_close",
summaries = "mean",
include_margins = FALSE)
assignee_data <- full_join(status_by_assignee, time_by_assignee)
assignee_data <- assignee_data %>%
mutate(`Time to close mean (hrs)` = as.numeric(`Time to close mean`)) %>%
mutate(`Time to close min (hrs)` = ifelse(`Time to close min` == "Inf", NA, `Time to close min`)) %>%
mutate(`Time to close max (hrs)` = ifelse(`Time to close max` == "-Inf", NA, `Time to close max`)) %>%
dplyr::select(-c(`Time to close mean`, `Time to close min`, `Time to close max`))
return(assignee_data)
})
ticket_user_data_date_from <- reactive({
ticket_user_data <- user_data %>% filter(uuid %in% ticket_data_date_from()$uuid)
return(ticket_user_data)
})
# TODO: we need to calculate these summaries
summaries_overall <- reactive({
# Summaries overall --------
open_overall <- ticket_data_date_from() %>% filter(status == "open") %>% summarise(`Opened` = n())
closed_overall <- ticket_data_date_from() %>% filter(status == "closed") %>% summarise(`Closed` = n())
time_overall <- ticket_data_date_from() %>% summarise(`Time to close (mean)` = mean(time_to_close, na.rm = TRUE),
`Time to close (min)` = min(time_to_close, na.rm = TRUE),
`Time to close (max)` = max(time_to_close, na.rm = TRUE))
summaries_overall <- cbind(open_overall, closed_overall, time_overall)
return(summaries_overall)
})
t_u_gender <- reactive({
summary_table(ticket_user_data_date_from(),
factors = gender)
})
t_u_parish <- reactive({
summary_table(ticket_user_data_date_from(),
factors = parish)
})
# Reactive value for selected dataset ----
datasetInput <- reactive({
switch(input$dataset,
"Ticket data" = ticket_data_date_from(),
"Counsellor data" = assignee_data_date_from(),
"Overall summaries" = summaries_overall(),
"Gender summaries" = t_u_gender(),
"Parish summaries" = t_u_parish())
})
# Table of selected dataset ----
output$table <- renderDataTable({
datasetInput()
})
# Downloadable csv of selected dataset ----
output$downloadData <- downloadHandler(
filename = function() {
paste(input$dataset, ".csv", sep = "")
},
content = function(file) {
write.csv(datasetInput(), file, row.names = FALSE)
}
)
output$myvaluebox1 <- shinydashboard::renderValueBox({
n_open <- nrow(ticket_data_date_from() %>% filter(status == "open"))
shinydashboard::valueBox(n_open, subtitle = "open", icon = icon("sun"),
color = "aqua"
)
})
output$myvaluebox2 <- shinydashboard::renderValueBox({
n_closed <- nrow(ticket_data_date_from() %>% filter(status == "closed"))
shinydashboard::valueBox(n_closed, subtitle = "closed",icon = icon("check"),
color = "green"
)
})
output$myvaluebox3 <- shinydashboard::renderValueBox({
mean_ttc <- round(as.numeric(mean(ticket_data_date_from()$time_to_close, na.rm = TRUE)), 1)
shinydashboard::valueBox(mean_ttc, subtitle = "average hours to close", icon = icon("clock"),
color = "yellow"
)
})
}
shiny::shinyApp(ui = ui, server = server)
}
library(shiny)
library(shinydashboard)
library(tidyverse)
library(rjson)
library(readxl)
library(rapidpror)
country <- "Jamaica" # Jamaica, Philippines, South Africa, Malaysia
type <- "KPI"
source("Functions.R")
source(paste0(country, "_dashboard_settings.R"))
if (type == "KPI"){
source("kpi_update.R")
source("kpi_shiny.R")
kpi_shiny()
} else {
source("R Shiny Template.R")
source("Data Cleaning.R")
parenttext_shiny(country = country, date_from = default_date_from, date_to = default_date_to, include_archived_data = include_archived_data)
}
j
